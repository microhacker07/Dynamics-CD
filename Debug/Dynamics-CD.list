
Dynamics-CD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a1c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca8  08004ca8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004ca8  08004ca8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ca8  08004ca8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000070  08004d20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08004d20  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122f4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026df  00000000  00000000  00032394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00034a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00035c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f2f7  00000000  00000000  00036c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012398  00000000  00000000  00055f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6950  00000000  00000000  0006831f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ec6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005244  00000000  00000000  0012ecc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004be4 	.word	0x08004be4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004be4 	.word	0x08004be4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d013      	beq.n	8000300 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00b      	beq.n	8000300 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002e8:	e000      	b.n	80002ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <BMI088_GyroRead8>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t BMI088_GyroRead8(uint8_t addr, uint8_t *data) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af02      	add	r7, sp, #8
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]

	uint8_t txBuf[3] = {(addr | 0x80), 0x00, 0x00};
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000322:	b2db      	uxtb	r3, r3
 8000324:	733b      	strb	r3, [r7, #12]
 8000326:	2300      	movs	r3, #0
 8000328:	737b      	strb	r3, [r7, #13]
 800032a:	2300      	movs	r3, #0
 800032c:	73bb      	strb	r3, [r7, #14]
	uint8_t rxBuf[3];

	HAL_GPIO_WritePin(GPIOB, SPI1_GYRO_NCS_Pin, 	GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000334:	4811      	ldr	r0, [pc, #68]	; (800037c <BMI088_GyroRead8+0x6c>)
 8000336:	f000 feef 	bl	8001118 <HAL_GPIO_WritePin>
	uint8_t status = (HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, 3, HAL_MAX_DELAY) == HAL_OK);
 800033a:	f107 0208 	add.w	r2, r7, #8
 800033e:	f107 010c 	add.w	r1, r7, #12
 8000342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	2303      	movs	r3, #3
 800034a:	480d      	ldr	r0, [pc, #52]	; (8000380 <BMI088_GyroRead8+0x70>)
 800034c:	f002 f847 	bl	80023de <HAL_SPI_TransmitReceive>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	bf0c      	ite	eq
 8000356:	2301      	moveq	r3, #1
 8000358:	2300      	movne	r3, #0
 800035a:	b2db      	uxtb	r3, r3
 800035c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOB, 	SPI1_GYRO_NCS_Pin, 	GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000364:	4805      	ldr	r0, [pc, #20]	; (800037c <BMI088_GyroRead8+0x6c>)
 8000366:	f000 fed7 	bl	8001118 <HAL_GPIO_WritePin>

	*data = rxBuf[1];
 800036a:	7a7a      	ldrb	r2, [r7, #9]
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	701a      	strb	r2, [r3, #0]

	return status;
 8000370:	7bfb      	ldrb	r3, [r7, #15]
}
 8000372:	4618      	mov	r0, r3
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	48000400 	.word	0x48000400
 8000380:	2000008c 	.word	0x2000008c

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038a:	f000 fbcc 	bl	8000b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038e:	f000 f847 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000392:	f000 f96f 	bl	8000674 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000396:	f000 f88f 	bl	80004b8 <MX_SPI1_Init>
  MX_TIM3_Init();
 800039a:	f000 f8cb 	bl	8000534 <MX_TIM3_Init>
  MX_USB_PCD_Init();
 800039e:	f000 f941 	bl	8000624 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  // Set all NCS pins high
  HAL_GPIO_WritePin(SPI1_ACCEL_NCS_GPIO_Port,	SPI1_ACCEL_NCS_Pin, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003a8:	481a      	ldr	r0, [pc, #104]	; (8000414 <main+0x90>)
 80003aa:	f000 feb5 	bl	8001118 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_GYRO_NCS_GPIO_Port, 	SPI1_GYRO_NCS_Pin, 	GPIO_PIN_SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b4:	4817      	ldr	r0, [pc, #92]	; (8000414 <main+0x90>)
 80003b6:	f000 feaf 	bl	8001118 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_BARO_NCS_GPIO_Port, 	SPI1_BARO_NCS_Pin, 	GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c0:	4814      	ldr	r0, [pc, #80]	; (8000414 <main+0x90>)
 80003c2:	f000 fea9 	bl	8001118 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_FLASH_NCS_GPIO_Port, 	SPI1_FLASH_NCS_Pin, GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003cc:	4811      	ldr	r0, [pc, #68]	; (8000414 <main+0x90>)
 80003ce:	f000 fea3 	bl	8001118 <HAL_GPIO_WritePin>

  // LED PWM Timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003d2:	2104      	movs	r1, #4
 80003d4:	4810      	ldr	r0, [pc, #64]	; (8000418 <main+0x94>)
 80003d6:	f002 fc31 	bl	8002c3c <HAL_TIM_PWM_Start>

  // LED brightness
  uint8_t intensity = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // LED PWM Timer Channel
	  htim3.Instance->CCR2 = intensity;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <main+0x94>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	79fa      	ldrb	r2, [r7, #7]
 80003e4:	639a      	str	r2, [r3, #56]	; 0x38

	  // Increase brightness
	  intensity += 5;
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	3305      	adds	r3, #5
 80003ea:	71fb      	strb	r3, [r7, #7]

	  // Reset brightness
	  if (intensity > 100) {
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	2b64      	cmp	r3, #100	; 0x64
 80003f0:	d901      	bls.n	80003f6 <main+0x72>
		  intensity = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	71fb      	strb	r3, [r7, #7]
	  }

	  uint8_t data;
	  BMI088_GyroRead8(0x00, &data);
 80003f6:	1dbb      	adds	r3, r7, #6
 80003f8:	4619      	mov	r1, r3
 80003fa:	2000      	movs	r0, #0
 80003fc:	f7ff ff88 	bl	8000310 <BMI088_GyroRead8>
	  printf("%u\n", data);
 8000400:	79bb      	ldrb	r3, [r7, #6]
 8000402:	4619      	mov	r1, r3
 8000404:	4805      	ldr	r0, [pc, #20]	; (800041c <main+0x98>)
 8000406:	f003 fc5f 	bl	8003cc8 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 800040a:	2064      	movs	r0, #100	; 0x64
 800040c:	f000 fbfc 	bl	8000c08 <HAL_Delay>
  {
 8000410:	e7e5      	b.n	80003de <main+0x5a>
 8000412:	bf00      	nop
 8000414:	48000400 	.word	0x48000400
 8000418:	200000f0 	.word	0x200000f0
 800041c:	08004bfc 	.word	0x08004bfc

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b094      	sub	sp, #80	; 0x50
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0318 	add.w	r3, r7, #24
 800042a:	2238      	movs	r2, #56	; 0x38
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fc42 	bl	8003cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000442:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000446:	f000 ff8f 	bl	8001368 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044a:	2302      	movs	r3, #2
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000454:	2340      	movs	r3, #64	; 0x40
 8000456:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000458:	2302      	movs	r3, #2
 800045a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045c:	2302      	movs	r3, #2
 800045e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000460:	2301      	movs	r3, #1
 8000462:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000464:	2312      	movs	r3, #18
 8000466:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000468:	2302      	movs	r3, #2
 800046a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 800046c:	2306      	movs	r3, #6
 800046e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000470:	2302      	movs	r3, #2
 8000472:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000474:	f107 0318 	add.w	r3, r7, #24
 8000478:	4618      	mov	r0, r3
 800047a:	f001 f819 	bl	80014b0 <HAL_RCC_OscConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000484:	f000 f96a 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000488:	230f      	movs	r3, #15
 800048a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048c:	2303      	movs	r3, #3
 800048e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	2104      	movs	r1, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 fb1d 	bl	8001ae0 <HAL_RCC_ClockConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004ac:	f000 f956 	bl	800075c <Error_Handler>
  }
}
 80004b0:	bf00      	nop
 80004b2:	3750      	adds	r7, #80	; 0x50
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_SPI1_Init+0x74>)
 80004be:	4a1c      	ldr	r2, [pc, #112]	; (8000530 <MX_SPI1_Init+0x78>)
 80004c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004c2:	4b1a      	ldr	r3, [pc, #104]	; (800052c <MX_SPI1_Init+0x74>)
 80004c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_SPI1_Init+0x74>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <MX_SPI1_Init+0x74>)
 80004d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80004d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_SPI1_Init+0x74>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <MX_SPI1_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_SPI1_Init+0x74>)
 80004e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_SPI1_Init+0x74>)
 80004ee:	2218      	movs	r2, #24
 80004f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_SPI1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_SPI1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_SPI1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_SPI1_Init+0x74>)
 8000506:	2207      	movs	r2, #7
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_SPI1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_SPI1_Init+0x74>)
 8000518:	f001 feb6 	bl	8002288 <HAL_SPI_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000522:	f000 f91b 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	2000008c 	.word	0x2000008c
 8000530:	40013000 	.word	0x40013000

08000534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08e      	sub	sp, #56	; 0x38
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000548:	f107 031c 	add.w	r3, r7, #28
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000566:	4b2d      	ldr	r3, [pc, #180]	; (800061c <MX_TIM3_Init+0xe8>)
 8000568:	4a2d      	ldr	r2, [pc, #180]	; (8000620 <MX_TIM3_Init+0xec>)
 800056a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14400-1;
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <MX_TIM3_Init+0xe8>)
 800056e:	f643 023f 	movw	r2, #14399	; 0x383f
 8000572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <MX_TIM3_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800057a:	4b28      	ldr	r3, [pc, #160]	; (800061c <MX_TIM3_Init+0xe8>)
 800057c:	2263      	movs	r2, #99	; 0x63
 800057e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000580:	4b26      	ldr	r3, [pc, #152]	; (800061c <MX_TIM3_Init+0xe8>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <MX_TIM3_Init+0xe8>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800058c:	4823      	ldr	r0, [pc, #140]	; (800061c <MX_TIM3_Init+0xe8>)
 800058e:	f002 fa9d 	bl	8002acc <HAL_TIM_Base_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000598:	f000 f8e0 	bl	800075c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a6:	4619      	mov	r1, r3
 80005a8:	481c      	ldr	r0, [pc, #112]	; (800061c <MX_TIM3_Init+0xe8>)
 80005aa:	f002 fd5b 	bl	8003064 <HAL_TIM_ConfigClockSource>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80005b4:	f000 f8d2 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005b8:	4818      	ldr	r0, [pc, #96]	; (800061c <MX_TIM3_Init+0xe8>)
 80005ba:	f002 fade 	bl	8002b7a <HAL_TIM_PWM_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80005c4:	f000 f8ca 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4619      	mov	r1, r3
 80005d6:	4811      	ldr	r0, [pc, #68]	; (800061c <MX_TIM3_Init+0xe8>)
 80005d8:	f003 fa86 	bl	8003ae8 <HAL_TIMEx_MasterConfigSynchronization>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80005e2:	f000 f8bb 	bl	800075c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e6:	2360      	movs	r3, #96	; 0x60
 80005e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	2204      	movs	r2, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4807      	ldr	r0, [pc, #28]	; (800061c <MX_TIM3_Init+0xe8>)
 80005fe:	f002 fc1d 	bl	8002e3c <HAL_TIM_PWM_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000608:	f000 f8a8 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <MX_TIM3_Init+0xe8>)
 800060e:	f000 f931 	bl	8000874 <HAL_TIM_MspPostInit>

}
 8000612:	bf00      	nop
 8000614:	3738      	adds	r7, #56	; 0x38
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000f0 	.word	0x200000f0
 8000620:	40000400 	.word	0x40000400

08000624 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_USB_PCD_Init+0x48>)
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <MX_USB_PCD_Init+0x4c>)
 800062c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_USB_PCD_Init+0x48>)
 8000630:	2208      	movs	r2, #8
 8000632:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <MX_USB_PCD_Init+0x48>)
 8000636:	2202      	movs	r2, #2
 8000638:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USB_PCD_Init+0x48>)
 800063c:	2202      	movs	r2, #2
 800063e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_USB_PCD_Init+0x48>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USB_PCD_Init+0x48>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_USB_PCD_Init+0x48>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USB_PCD_Init+0x48>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_USB_PCD_Init+0x48>)
 800065a:	f000 fd75 	bl	8001148 <HAL_PCD_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000664:	f000 f87a 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000013c 	.word	0x2000013c
 8000670:	40005c00 	.word	0x40005c00

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <MX_GPIO_Init+0xa8>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a23      	ldr	r2, [pc, #140]	; (800071c <MX_GPIO_Init+0xa8>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <MX_GPIO_Init+0xa8>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_GPIO_Init+0xa8>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a1d      	ldr	r2, [pc, #116]	; (800071c <MX_GPIO_Init+0xa8>)
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_GPIO_Init+0xa8>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0320 	and.w	r3, r3, #32
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_GPIO_Init+0xa8>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <MX_GPIO_Init+0xa8>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_GPIO_Init+0xa8>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_GPIO_Init+0xa8>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <MX_GPIO_Init+0xa8>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_GPIO_Init+0xa8>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_ACCEL_NCS_Pin|SPI1_GYRO_NCS_Pin|SPI1_BARO_NCS_Pin|SPI1_FLASH_NCS_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <MX_GPIO_Init+0xac>)
 80006f2:	f000 fd11 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_ACCEL_NCS_Pin SPI1_GYRO_NCS_Pin SPI1_BARO_NCS_Pin SPI1_FLASH_NCS_Pin */
  GPIO_InitStruct.Pin = SPI1_ACCEL_NCS_Pin|SPI1_GYRO_NCS_Pin|SPI1_BARO_NCS_Pin|SPI1_FLASH_NCS_Pin;
 80006f6:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_GPIO_Init+0xac>)
 8000710:	f000 fb80 	bl	8000e14 <HAL_GPIO_Init>

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	48000400 	.word	0x48000400

08000724 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	e009      	b.n	800074a <_write+0x26>
    ITM_SendChar(*ptr++);
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	60ba      	str	r2, [r7, #8]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fdbe 	bl	80002c0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	429a      	cmp	r2, r3
 8000750:	dbf1      	blt.n	8000736 <_write+0x12>
  }
  return len;
 8000752:	687b      	ldr	r3, [r7, #4]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x44>)
 8000770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_MspInit+0x44>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6613      	str	r3, [r2, #96]	; 0x60
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_MspInit+0x44>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_MspInit+0x44>)
 8000788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078a:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_MspInit+0x44>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	6593      	str	r3, [r2, #88]	; 0x58
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_MspInit+0x44>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a17      	ldr	r2, [pc, #92]	; (800082c <HAL_SPI_MspInit+0x7c>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d128      	bne.n	8000824 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_SPI_MspInit+0x80>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d6:	4a16      	ldr	r2, [pc, #88]	; (8000830 <HAL_SPI_MspInit+0x80>)
 80007d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007dc:	6613      	str	r3, [r2, #96]	; 0x60
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_SPI_MspInit+0x80>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_SPI_MspInit+0x80>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <HAL_SPI_MspInit+0x80>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_SPI_MspInit+0x80>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000802:	23e0      	movs	r3, #224	; 0xe0
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000812:	2305      	movs	r3, #5
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f000 faf8 	bl	8000e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40013000 	.word	0x40013000
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_TIM_Base_MspInit+0x38>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d10b      	bne.n	800085e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_TIM_Base_MspInit+0x3c>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	4a09      	ldr	r2, [pc, #36]	; (8000870 <HAL_TIM_Base_MspInit+0x3c>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6593      	str	r3, [r2, #88]	; 0x58
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_TIM_Base_MspInit+0x3c>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40000400 	.word	0x40000400
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <HAL_TIM_MspPostInit+0x64>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d11b      	bne.n	80008ce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_TIM_MspPostInit+0x68>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <HAL_TIM_MspPostInit+0x68>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_TIM_MspPostInit+0x68>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008ae:	2320      	movs	r3, #32
 80008b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008be:	2302      	movs	r3, #2
 80008c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <HAL_TIM_MspPostInit+0x6c>)
 80008ca:	f000 faa3 	bl	8000e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008ce:	bf00      	nop
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40000400 	.word	0x40000400
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48000400 	.word	0x48000400

080008e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2244      	movs	r2, #68	; 0x44
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 f9df 	bl	8003cb8 <memset>
  if(hpcd->Instance==USB)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a11      	ldr	r2, [pc, #68]	; (8000944 <HAL_PCD_MspInit+0x60>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d11b      	bne.n	800093c <HAL_PCD_MspInit+0x58>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800090a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fac7 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8000920:	f7ff ff1c 	bl	800075c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_PCD_MspInit+0x64>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_PCD_MspInit+0x64>)
 800092a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800092e:	6593      	str	r3, [r2, #88]	; 0x58
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_PCD_MspInit+0x64>)
 8000932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800093c:	bf00      	nop
 800093e:	3750      	adds	r7, #80	; 0x50
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40005c00 	.word	0x40005c00
 8000948:	40021000 	.word	0x40021000

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f918 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e00a      	b.n	80009c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009b2:	f3af 8000 	nop.w
 80009b6:	4601      	mov	r1, r0
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	b2ca      	uxtb	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbf0      	blt.n	80009b2 <_read+0x12>
	}

return len;
 80009d0:	687b      	ldr	r3, [r7, #4]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_close>:
	}
	return len;
}

int _close(int file)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
	return -1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a02:	605a      	str	r2, [r3, #4]
	return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_isatty>:

int _isatty(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	return 1;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
	return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d207      	bcs.n	8000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a74:	f003 f8f6 	bl	8003c64 <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a82:	e009      	b.n	8000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <_sbrk+0x64>)
 8000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20008000 	.word	0x20008000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	20000430 	.word	0x20000430
 8000aac:	20000448 	.word	0x20000448

08000ab0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ada:	490e      	ldr	r1, [pc, #56]	; (8000b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <LoopForever+0xe>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af0:	4c0b      	ldr	r4, [pc, #44]	; (8000b20 <LoopForever+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000afe:	f7ff ffd7 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f003 f8b5 	bl	8003c70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b06:	f7ff fc3d 	bl	8000384 <main>

08000b0a <LoopForever>:

LoopForever:
    b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   r0, =_estack
 8000b0c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b18:	08004cb0 	.word	0x08004cb0
  ldr r2, =_sbss
 8000b1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b20:	20000448 	.word	0x20000448

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>

08000b26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f93d 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b36:	200f      	movs	r0, #15
 8000b38:	f000 f80e 	bl	8000b58 <HAL_InitTick>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e001      	b.n	8000b4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b48:	f7ff fe0e 	bl	8000768 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]

}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_InitTick+0x68>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d022      	beq.n	8000bb2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_InitTick+0x68>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f93a 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10f      	bne.n	8000bac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	d809      	bhi.n	8000ba6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b92:	2200      	movs	r2, #0
 8000b94:	6879      	ldr	r1, [r7, #4]
 8000b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b9a:	f000 f914 	bl	8000dc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_InitTick+0x70>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	e007      	b.n	8000bb6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	e004      	b.n	8000bb6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e001      	b.n	8000bb6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x1c>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x20>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <HAL_IncTick+0x1c>)
 8000bdc:	6013      	str	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	20000434 	.word	0x20000434
 8000bec:	20000008 	.word	0x20000008

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000434 	.word	0x20000434

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff ffee 	bl	8000bf0 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c20:	d004      	beq.n	8000c2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_Delay+0x40>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	4413      	add	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2c:	bf00      	nop
 8000c2e:	f7ff ffdf 	bl	8000bf0 <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d8f7      	bhi.n	8000c2e <HAL_Delay+0x26>
  {
  }
}
 8000c3e:	bf00      	nop
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000008 	.word	0x20000008

08000c4c <__NVIC_SetPriorityGrouping>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_SetPriority>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff47 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff5e 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff90 	bl	8000d04 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5f 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffb2 	bl	8000d6c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e22:	e15a      	b.n	80010da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 814c 	beq.w	80010d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d005      	beq.n	8000e54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d130      	bne.n	8000eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	091b      	lsrs	r3, r3, #4
 8000ea0:	f003 0201 	and.w	r2, r3, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d017      	beq.n	8000ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d123      	bne.n	8000f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	6939      	ldr	r1, [r7, #16]
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0203 	and.w	r2, r3, #3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80a6 	beq.w	80010d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	4b5b      	ldr	r3, [pc, #364]	; (80010f8 <HAL_GPIO_Init+0x2e4>)
 8000f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8c:	4a5a      	ldr	r2, [pc, #360]	; (80010f8 <HAL_GPIO_Init+0x2e4>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6613      	str	r3, [r2, #96]	; 0x60
 8000f94:	4b58      	ldr	r3, [pc, #352]	; (80010f8 <HAL_GPIO_Init+0x2e4>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fa0:	4a56      	ldr	r2, [pc, #344]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fca:	d01f      	beq.n	800100c <HAL_GPIO_Init+0x1f8>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a4c      	ldr	r2, [pc, #304]	; (8001100 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d019      	beq.n	8001008 <HAL_GPIO_Init+0x1f4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4b      	ldr	r2, [pc, #300]	; (8001104 <HAL_GPIO_Init+0x2f0>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d013      	beq.n	8001004 <HAL_GPIO_Init+0x1f0>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <HAL_GPIO_Init+0x2f4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d00d      	beq.n	8001000 <HAL_GPIO_Init+0x1ec>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a49      	ldr	r2, [pc, #292]	; (800110c <HAL_GPIO_Init+0x2f8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d007      	beq.n	8000ffc <HAL_GPIO_Init+0x1e8>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a48      	ldr	r2, [pc, #288]	; (8001110 <HAL_GPIO_Init+0x2fc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d101      	bne.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	e00a      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	e008      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 8001000:	2303      	movs	r3, #3
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1fa>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800101e:	4937      	ldr	r1, [pc, #220]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102c:	4b39      	ldr	r3, [pc, #228]	; (8001114 <HAL_GPIO_Init+0x300>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001050:	4a30      	ldr	r2, [pc, #192]	; (8001114 <HAL_GPIO_Init+0x300>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001056:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x300>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107a:	4a26      	ldr	r2, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x300>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <HAL_GPIO_Init+0x300>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_GPIO_Init+0x300>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_GPIO_Init+0x300>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <HAL_GPIO_Init+0x300>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f ae9d 	bne.w	8000e24 <HAL_GPIO_Init+0x10>
  }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	48000c00 	.word	0x48000c00
 800110c:	48001000 	.word	0x48001000
 8001110:	48001400 	.word	0x48001400
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001134:	e002      	b.n	800113c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af06      	add	r7, sp, #24
 800114e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e0d7      	b.n	800130a <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fbb8 	bl	80008e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f002 fd33 	bl	8003bec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e04c      	b.n	8001226 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	3301      	adds	r3, #1
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	b298      	uxth	r0, r3
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3336      	adds	r3, #54	; 0x36
 80011ca:	4602      	mov	r2, r0
 80011cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	3303      	adds	r3, #3
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	3338      	adds	r3, #56	; 0x38
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	333c      	adds	r3, #60	; 0x3c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	3340      	adds	r3, #64	; 0x40
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	3301      	adds	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3ad      	bcc.n	800118c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e044      	b.n	80012c0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3b5      	bcc.n	8001236 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	687e      	ldr	r6, [r7, #4]
 80012d2:	466d      	mov	r5, sp
 80012d4:	f106 0410 	add.w	r4, r6, #16
 80012d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	602b      	str	r3, [r5, #0]
 80012e0:	1d33      	adds	r3, r6, #4
 80012e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e4:	6838      	ldr	r0, [r7, #0]
 80012e6:	f002 fc9c 	bl	8003c22 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d102      	bne.n	8001308 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f805 	bl	8001312 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001312 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001336:	b29b      	uxth	r3, r3
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	b29a      	uxth	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800134a:	b29b      	uxth	r3, r3
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	b29a      	uxth	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d141      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001376:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800137e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001382:	d131      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001384:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800138a:	4a46      	ldr	r2, [pc, #280]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001394:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800139c:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013a4:	4b40      	ldr	r3, [pc, #256]	; (80014a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2232      	movs	r2, #50	; 0x32
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4a3f      	ldr	r2, [pc, #252]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	0c9b      	lsrs	r3, r3, #18
 80013b6:	3301      	adds	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ba:	e002      	b.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3b01      	subs	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c2:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ce:	d102      	bne.n	80013d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f2      	bne.n	80013bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e2:	d158      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e057      	b.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ee:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013f8:	e04d      	b.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001400:	d141      	bne.n	8001486 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800140a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140e:	d131      	bne.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001416:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001428:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800142e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2232      	movs	r2, #50	; 0x32
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9b      	lsrs	r3, r3, #18
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001446:	e002      	b.n	800144e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3b01      	subs	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145a:	d102      	bne.n	8001462 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f2      	bne.n	8001448 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146e:	d112      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e011      	b.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001484:	e007      	b.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001494:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40007000 	.word	0x40007000
 80014a8:	20000000 	.word	0x20000000
 80014ac:	431bde83 	.word	0x431bde83

080014b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e306      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d075      	beq.n	80015ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ce:	4b97      	ldr	r3, [pc, #604]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d8:	4b94      	ldr	r3, [pc, #592]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_OscConfig+0x3e>
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b03      	cmp	r3, #3
 80014ec:	d002      	beq.n	80014f4 <HAL_RCC_OscConfig+0x44>
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d10b      	bne.n	800150c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b8d      	ldr	r3, [pc, #564]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d05b      	beq.n	80015b8 <HAL_RCC_OscConfig+0x108>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d157      	bne.n	80015b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e2e1      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d106      	bne.n	8001524 <HAL_RCC_OscConfig+0x74>
 8001516:	4b85      	ldr	r3, [pc, #532]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a84      	ldr	r2, [pc, #528]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e01d      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x98>
 800152e:	4b7f      	ldr	r3, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7e      	ldr	r2, [pc, #504]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b7c      	ldr	r3, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7b      	ldr	r2, [pc, #492]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xb0>
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a77      	ldr	r2, [pc, #476]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b75      	ldr	r3, [pc, #468]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a74      	ldr	r2, [pc, #464]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fb42 	bl	8000bf0 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fb3e 	bl	8000bf0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e2a6      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001582:	4b6a      	ldr	r3, [pc, #424]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0xc0>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fb2e 	bl	8000bf0 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fb2a 	bl	8000bf0 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e292      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015aa:	4b60      	ldr	r3, [pc, #384]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0xe8>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d075      	beq.n	80016b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c6:	4b59      	ldr	r3, [pc, #356]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d0:	4b56      	ldr	r3, [pc, #344]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b0c      	cmp	r3, #12
 80015de:	d102      	bne.n	80015e6 <HAL_RCC_OscConfig+0x136>
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d002      	beq.n	80015ec <HAL_RCC_OscConfig+0x13c>
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d11f      	bne.n	800162c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_OscConfig+0x154>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e265      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b49      	ldr	r3, [pc, #292]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	4946      	ldr	r1, [pc, #280]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001618:	4b45      	ldr	r3, [pc, #276]	; (8001730 <HAL_RCC_OscConfig+0x280>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fa9b 	bl	8000b58 <HAL_InitTick>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d043      	beq.n	80016b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e251      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d023      	beq.n	800167c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001634:	4b3d      	ldr	r3, [pc, #244]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a3c      	ldr	r2, [pc, #240]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fad6 	bl	8000bf0 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fad2 	bl	8000bf0 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e23a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165a:	4b34      	ldr	r3, [pc, #208]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	061b      	lsls	r3, r3, #24
 8001674:	492d      	ldr	r1, [pc, #180]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]
 800167a:	e01a      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fab2 	bl	8000bf0 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff faae 	bl	8000bf0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e216      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1e0>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d041      	beq.n	8001742 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01c      	beq.n	8001700 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fa8b 	bl	8000bf0 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fa87 	bl	8000bf0 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1ef      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f0:	4b0e      	ldr	r3, [pc, #56]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ef      	beq.n	80016de <HAL_RCC_OscConfig+0x22e>
 80016fe:	e020      	b.n	8001742 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_RCC_OscConfig+0x27c>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fa6e 	bl	8000bf0 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001716:	e00d      	b.n	8001734 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fa6a 	bl	8000bf0 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d906      	bls.n	8001734 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e1d2      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ea      	bne.n	8001718 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80a6 	beq.w	800189c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001754:	4b84      	ldr	r3, [pc, #528]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x2b4>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x2b6>
 8001764:	2300      	movs	r3, #0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00d      	beq.n	8001786 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	4a7e      	ldr	r2, [pc, #504]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6593      	str	r3, [r2, #88]	; 0x58
 8001776:	4b7c      	ldr	r3, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001782:	2301      	movs	r3, #1
 8001784:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	4b79      	ldr	r3, [pc, #484]	; (800196c <HAL_RCC_OscConfig+0x4bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d118      	bne.n	80017c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001792:	4b76      	ldr	r3, [pc, #472]	; (800196c <HAL_RCC_OscConfig+0x4bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a75      	ldr	r2, [pc, #468]	; (800196c <HAL_RCC_OscConfig+0x4bc>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179e:	f7ff fa27 	bl	8000bf0 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a6:	f7ff fa23 	bl	8000bf0 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e18b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b8:	4b6c      	ldr	r3, [pc, #432]	; (800196c <HAL_RCC_OscConfig+0x4bc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d108      	bne.n	80017de <HAL_RCC_OscConfig+0x32e>
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d2:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017dc:	e024      	b.n	8001828 <HAL_RCC_OscConfig+0x378>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d110      	bne.n	8001808 <HAL_RCC_OscConfig+0x358>
 80017e6:	4b60      	ldr	r3, [pc, #384]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	4a5e      	ldr	r2, [pc, #376]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f6:	4b5c      	ldr	r3, [pc, #368]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fc:	4a5a      	ldr	r2, [pc, #360]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001806:	e00f      	b.n	8001828 <HAL_RCC_OscConfig+0x378>
 8001808:	4b57      	ldr	r3, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180e:	4a56      	ldr	r2, [pc, #344]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181e:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001820:	f023 0304 	bic.w	r3, r3, #4
 8001824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d016      	beq.n	800185e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001830:	f7ff f9de 	bl	8000bf0 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff f9da 	bl	8000bf0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e140      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ed      	beq.n	8001838 <HAL_RCC_OscConfig+0x388>
 800185c:	e015      	b.n	800188a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff f9c7 	bl	8000bf0 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff f9c3 	bl	8000bf0 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e129      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800187c:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ed      	bne.n	8001866 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800188a:	7ffb      	ldrb	r3, [r7, #31]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	4a34      	ldr	r2, [pc, #208]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d03c      	beq.n	8001922 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01c      	beq.n	80018ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b6:	4a2c      	ldr	r2, [pc, #176]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff f996 	bl	8000bf0 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c8:	f7ff f992 	bl	8000bf0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0fa      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ef      	beq.n	80018c8 <HAL_RCC_OscConfig+0x418>
 80018e8:	e01b      	b.n	8001922 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f0:	4a1d      	ldr	r2, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff f979 	bl	8000bf0 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001902:	f7ff f975 	bl	8000bf0 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0dd      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ef      	bne.n	8001902 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80d1 	beq.w	8001ace <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b0c      	cmp	r3, #12
 8001936:	f000 808b 	beq.w	8001a50 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d15e      	bne.n	8001a00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff f94f 	bl	8000bf0 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	e00c      	b.n	8001970 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff f94b 	bl	8000bf0 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d905      	bls.n	8001970 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0b3      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
 8001968:	40021000 	.word	0x40021000
 800196c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ec      	bne.n	8001956 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800197c:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	4b56      	ldr	r3, [pc, #344]	; (8001adc <HAL_RCC_OscConfig+0x62c>)
 8001982:	4013      	ands	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6a11      	ldr	r1, [r2, #32]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800198c:	3a01      	subs	r2, #1
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	4311      	orrs	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001996:	0212      	lsls	r2, r2, #8
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800199e:	0852      	lsrs	r2, r2, #1
 80019a0:	3a01      	subs	r2, #1
 80019a2:	0552      	lsls	r2, r2, #21
 80019a4:	4311      	orrs	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019aa:	0852      	lsrs	r2, r2, #1
 80019ac:	3a01      	subs	r2, #1
 80019ae:	0652      	lsls	r2, r2, #25
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019b6:	06d2      	lsls	r2, r2, #27
 80019b8:	430a      	orrs	r2, r1
 80019ba:	4947      	ldr	r1, [pc, #284]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c0:	4b45      	ldr	r3, [pc, #276]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a44      	ldr	r2, [pc, #272]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019cc:	4b42      	ldr	r3, [pc, #264]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4a41      	ldr	r2, [pc, #260]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f90a 	bl	8000bf0 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f906 	bl	8000bf0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e06e      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x530>
 80019fe:	e066      	b.n	8001ace <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a00:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a34      	ldr	r2, [pc, #208]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a0c:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001a12:	f023 0303 	bic.w	r3, r3, #3
 8001a16:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a18:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4a2e      	ldr	r2, [pc, #184]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001a1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f8e2 	bl	8000bf0 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff f8de 	bl	8000bf0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e046      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x580>
 8001a4e:	e03e      	b.n	8001ace <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e039      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_RCC_OscConfig+0x628>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d12c      	bne.n	8001aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d123      	bne.n	8001aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d11b      	bne.n	8001aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d113      	bne.n	8001aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	019f800c 	.word	0x019f800c

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e11e      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b91      	ldr	r3, [pc, #580]	; (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d910      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b8e      	ldr	r3, [pc, #568]	; (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 020f 	bic.w	r2, r3, #15
 8001b0e:	498c      	ldr	r1, [pc, #560]	; (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b8a      	ldr	r3, [pc, #552]	; (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e106      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d073      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d129      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3c:	4b81      	ldr	r3, [pc, #516]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0f4      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b4c:	f000 f966 	bl	8001e1c <RCC_GetSysClockFreqFromPLLSource>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4a7c      	ldr	r2, [pc, #496]	; (8001d48 <HAL_RCC_ClockConfig+0x268>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d93f      	bls.n	8001bda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b5a:	4b7a      	ldr	r3, [pc, #488]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d033      	beq.n	8001bda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d12f      	bne.n	8001bda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b7a:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b82:	4a70      	ldr	r2, [pc, #448]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e024      	b.n	8001bda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b98:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0c6      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba8:	4b66      	ldr	r3, [pc, #408]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0be      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bb8:	f000 f8ce 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4a61      	ldr	r2, [pc, #388]	; (8001d48 <HAL_RCC_ClockConfig+0x268>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d909      	bls.n	8001bda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bc6:	4b5f      	ldr	r3, [pc, #380]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bce:	4a5d      	ldr	r2, [pc, #372]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b5a      	ldr	r3, [pc, #360]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4957      	ldr	r1, [pc, #348]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bec:	f7ff f800 	bl	8000bf0 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7fe fffc 	bl	8000bf0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e095      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b4e      	ldr	r3, [pc, #312]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d023      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c34:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a42      	ldr	r2, [pc, #264]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c4c:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c54:	4a3b      	ldr	r2, [pc, #236]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4936      	ldr	r1, [pc, #216]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b80      	cmp	r3, #128	; 0x80
 8001c74:	d105      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c76:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d21d      	bcs.n	8001ccc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 020f 	bic.w	r2, r3, #15
 8001c98:	4929      	ldr	r1, [pc, #164]	; (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ca0:	f7fe ffa6 	bl	8000bf0 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7fe ffa2 	bl	8000bf0 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e03b      	b.n	8001d36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCC_ClockConfig+0x260>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1ed      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4917      	ldr	r1, [pc, #92]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	490f      	ldr	r1, [pc, #60]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d0a:	f000 f825 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_RCC_ClockConfig+0x264>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	490c      	ldr	r1, [pc, #48]	; (8001d4c <HAL_RCC_ClockConfig+0x26c>)
 8001d1c:	5ccb      	ldrb	r3, [r1, r3]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x270>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_ClockConfig+0x274>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe ff12 	bl	8000b58 <HAL_InitTick>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40021000 	.word	0x40021000
 8001d48:	04c4b400 	.word	0x04c4b400
 8001d4c:	08004c00 	.word	0x08004c00
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d102      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	e047      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	e03e      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d136      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3301      	adds	r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d10c      	bne.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dac:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db6:	68d2      	ldr	r2, [r2, #12]
 8001db8:	0a12      	lsrs	r2, r2, #8
 8001dba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
      break;
 8001dc4:	e00c      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc6:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd0:	68d2      	ldr	r2, [r2, #12]
 8001dd2:	0a12      	lsrs	r2, r2, #8
 8001dd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
      break;
 8001dde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0e5b      	lsrs	r3, r3, #25
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	e001      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e00:	693b      	ldr	r3, [r7, #16]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	007a1200 	.word	0x007a1200

08001e1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3301      	adds	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d10c      	bne.n	8001e5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e40:	4a17      	ldr	r2, [pc, #92]	; (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e4a:	68d2      	ldr	r2, [r2, #12]
 8001e4c:	0a12      	lsrs	r2, r2, #8
 8001e4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
    break;
 8001e58:	e00c      	b.n	8001e74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	0a12      	lsrs	r2, r2, #8
 8001e68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
    break;
 8001e72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0e5b      	lsrs	r3, r3, #25
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e8e:	687b      	ldr	r3, [r7, #4]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	007a1200 	.word	0x007a1200
 8001ea4:	00f42400 	.word	0x00f42400

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8098 	beq.w	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10d      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	4a3f      	ldr	r2, [pc, #252]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a39      	ldr	r2, [pc, #228]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001efe:	f7fe fe77 	bl	8000bf0 <HAL_GetTick>
 8001f02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f04:	e009      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7fe fe73 	bl	8000bf0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d902      	bls.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	74fb      	strb	r3, [r7, #19]
        break;
 8001f18:	e005      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f1a:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ef      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d159      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01e      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d019      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f48:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f54:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f64:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f74:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe fe33 	bl	8000bf0 <HAL_GetTick>
 8001f8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fe2f 	bl	8000bf0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d902      	bls.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	74fb      	strb	r3, [r7, #19]
            break;
 8001fa4:	e006      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ec      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	4903      	ldr	r1, [pc, #12]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
 8001fd4:	74bb      	strb	r3, [r7, #18]
 8001fd6:	e005      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe4:	7c7b      	ldrb	r3, [r7, #17]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4ba6      	ldr	r3, [pc, #664]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	4aa5      	ldr	r2, [pc, #660]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002002:	4ba0      	ldr	r3, [pc, #640]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002008:	f023 0203 	bic.w	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	499c      	ldr	r1, [pc, #624]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002024:	4b97      	ldr	r3, [pc, #604]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202a:	f023 020c 	bic.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4994      	ldr	r1, [pc, #592]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002046:	4b8f      	ldr	r3, [pc, #572]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	498b      	ldr	r1, [pc, #556]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002068:	4b86      	ldr	r3, [pc, #536]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	4983      	ldr	r1, [pc, #524]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800208a:	4b7e      	ldr	r3, [pc, #504]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	497a      	ldr	r1, [pc, #488]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ac:	4b75      	ldr	r3, [pc, #468]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	4972      	ldr	r1, [pc, #456]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ce:	4b6d      	ldr	r3, [pc, #436]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4969      	ldr	r1, [pc, #420]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020f0:	4b64      	ldr	r3, [pc, #400]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4961      	ldr	r1, [pc, #388]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002112:	4b5c      	ldr	r3, [pc, #368]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002118:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	4958      	ldr	r1, [pc, #352]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002134:	4b53      	ldr	r3, [pc, #332]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	4950      	ldr	r1, [pc, #320]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002152:	d105      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a4a      	ldr	r2, [pc, #296]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800215e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800216c:	4b45      	ldr	r3, [pc, #276]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	4942      	ldr	r1, [pc, #264]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800218a:	d105      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800218c:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a3c      	ldr	r2, [pc, #240]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002196:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021a4:	4b37      	ldr	r3, [pc, #220]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4934      	ldr	r1, [pc, #208]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c2:	d105      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c4:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a2e      	ldr	r2, [pc, #184]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021dc:	4b29      	ldr	r3, [pc, #164]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	4926      	ldr	r1, [pc, #152]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a20      	ldr	r2, [pc, #128]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002206:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d015      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	4918      	ldr	r1, [pc, #96]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002232:	d105      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225a:	490a      	ldr	r1, [pc, #40]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800226a:	d105      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002278:	7cbb      	ldrb	r3, [r7, #18]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e09d      	b.n	80023d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d108      	bne.n	80022b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022aa:	d009      	beq.n	80022c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
 80022b2:	e005      	b.n	80022c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fa68 	bl	80007b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002300:	d902      	bls.n	8002308 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e002      	b.n	800230e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002316:	d007      	beq.n	8002328 <HAL_SPI_Init+0xa0>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002320:	d002      	beq.n	8002328 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236a:	ea42 0103 	orr.w	r1, r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	f003 0204 	and.w	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80023a4:	ea42 0103 	orr.w	r1, r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69da      	ldr	r2, [r3, #28]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b08a      	sub	sp, #40	; 0x28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_SPI_TransmitReceive+0x26>
 8002400:	2302      	movs	r3, #2
 8002402:	e1fb      	b.n	80027fc <HAL_SPI_TransmitReceive+0x41e>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800240c:	f7fe fbf0 	bl	8000bf0 <HAL_GetTick>
 8002410:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002418:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002424:	887b      	ldrh	r3, [r7, #2]
 8002426:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002428:	7efb      	ldrb	r3, [r7, #27]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d00e      	beq.n	800244c <HAL_SPI_TransmitReceive+0x6e>
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002434:	d106      	bne.n	8002444 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <HAL_SPI_TransmitReceive+0x66>
 800243e:	7efb      	ldrb	r3, [r7, #27]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d003      	beq.n	800244c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002444:	2302      	movs	r3, #2
 8002446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800244a:	e1cd      	b.n	80027e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_SPI_TransmitReceive+0x80>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_SPI_TransmitReceive+0x80>
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002464:	e1c0      	b.n	80027e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b04      	cmp	r3, #4
 8002470:	d003      	beq.n	800247a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2205      	movs	r2, #5
 8002476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	887a      	ldrh	r2, [r7, #2]
 8002492:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	887a      	ldrh	r2, [r7, #2]
 80024a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024bc:	d802      	bhi.n	80024c4 <HAL_SPI_TransmitReceive+0xe6>
 80024be:	8a3b      	ldrh	r3, [r7, #16]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d908      	bls.n	80024d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	e007      	b.n	80024e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	2b40      	cmp	r3, #64	; 0x40
 80024f2:	d007      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800250c:	d97c      	bls.n	8002608 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_SPI_TransmitReceive+0x13e>
 8002516:	8a7b      	ldrh	r3, [r7, #18]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d169      	bne.n	80025f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002540:	e056      	b.n	80025f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b02      	cmp	r3, #2
 800254e:	d11b      	bne.n	8002588 <HAL_SPI_TransmitReceive+0x1aa>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_SPI_TransmitReceive+0x1aa>
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	2b01      	cmp	r3, #1
 800255e:	d113      	bne.n	8002588 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	881a      	ldrh	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	1c9a      	adds	r2, r3, #2
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d11c      	bne.n	80025d0 <HAL_SPI_TransmitReceive+0x1f2>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	b292      	uxth	r2, r2
 80025ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	1c9a      	adds	r2, r3, #2
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025cc:	2301      	movs	r3, #1
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025d0:	f7fe fb0e 	bl	8000bf0 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025dc:	429a      	cmp	r2, r3
 80025de:	d807      	bhi.n	80025f0 <HAL_SPI_TransmitReceive+0x212>
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e6:	d003      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80025ee:	e0fb      	b.n	80027e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1a3      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x164>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d19d      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x164>
 8002606:	e0df      	b.n	80027c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_SPI_TransmitReceive+0x23a>
 8002610:	8a7b      	ldrh	r3, [r7, #18]
 8002612:	2b01      	cmp	r3, #1
 8002614:	f040 80cb 	bne.w	80027ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d912      	bls.n	8002648 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	881a      	ldrh	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	1c9a      	adds	r2, r3, #2
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b02      	subs	r3, #2
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002646:	e0b2      	b.n	80027ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	330c      	adds	r3, #12
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800266e:	e09e      	b.n	80027ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b02      	cmp	r3, #2
 800267c:	d134      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x30a>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02f      	beq.n	80026e8 <HAL_SPI_TransmitReceive+0x30a>
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	2b01      	cmp	r3, #1
 800268c:	d12c      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d912      	bls.n	80026be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	881a      	ldrh	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	1c9a      	adds	r2, r3, #2
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b02      	subs	r3, #2
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026bc:	e012      	b.n	80026e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d148      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x3aa>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d042      	beq.n	8002788 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d923      	bls.n	8002756 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	b292      	uxth	r2, r2
 800271a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	1c9a      	adds	r2, r3, #2
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b02      	subs	r3, #2
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d81f      	bhi.n	8002784 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	e016      	b.n	8002784 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f103 020c 	add.w	r2, r3, #12
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	7812      	ldrb	r2, [r2, #0]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002784:	2301      	movs	r3, #1
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002788:	f7fe fa32 	bl	8000bf0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002794:	429a      	cmp	r2, r3
 8002796:	d803      	bhi.n	80027a0 <HAL_SPI_TransmitReceive+0x3c2>
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279e:	d102      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0x3c8>
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80027ac:	e01c      	b.n	80027e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f47f af5b 	bne.w	8002670 <HAL_SPI_TransmitReceive+0x292>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f47f af54 	bne.w	8002670 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f937 	bl	8002a40 <SPI_EndRxTxTransaction>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	661a      	str	r2, [r3, #96]	; 0x60
 80027e4:	e000      	b.n	80027e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80027e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80027f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3728      	adds	r7, #40	; 0x28
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002814:	f7fe f9ec 	bl	8000bf0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	4413      	add	r3, r2
 8002822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002824:	f7fe f9e4 	bl	8000bf0 <HAL_GetTick>
 8002828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	015b      	lsls	r3, r3, #5
 8002830:	0d1b      	lsrs	r3, r3, #20
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800283a:	e054      	b.n	80028e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002842:	d050      	beq.n	80028e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002844:	f7fe f9d4 	bl	8000bf0 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	429a      	cmp	r2, r3
 8002852:	d902      	bls.n	800285a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d13d      	bne.n	80028d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002872:	d111      	bne.n	8002898 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287c:	d004      	beq.n	8002888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002886:	d107      	bne.n	8002898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a0:	d10f      	bne.n	80028c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e017      	b.n	8002906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	bf0c      	ite	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	2300      	movne	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	429a      	cmp	r2, r3
 8002902:	d19b      	bne.n	800283c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000000 	.word	0x20000000

08002914 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002926:	f7fe f963 	bl	8000bf0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	4413      	add	r3, r2
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002936:	f7fe f95b 	bl	8000bf0 <HAL_GetTick>
 800293a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002944:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00da      	lsls	r2, r3, #3
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	0d1b      	lsrs	r3, r3, #20
 8002954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800295c:	e060      	b.n	8002a20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002964:	d107      	bne.n	8002976 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002974:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800297c:	d050      	beq.n	8002a20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800297e:	f7fe f937 	bl	8000bf0 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298a:	429a      	cmp	r2, r3
 800298c:	d902      	bls.n	8002994 <SPI_WaitFifoStateUntilTimeout+0x80>
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d13d      	bne.n	8002a10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ac:	d111      	bne.n	80029d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b6:	d004      	beq.n	80029c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c0:	d107      	bne.n	80029d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029da:	d10f      	bne.n	80029fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e010      	b.n	8002a32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d196      	bne.n	800295e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3728      	adds	r7, #40	; 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000000 	.word	0x20000000

08002a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff ff5b 	bl	8002914 <SPI_WaitFifoStateUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e027      	b.n	8002ac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff fec0 	bl	8002804 <SPI_WaitFlagStateUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e014      	b.n	8002ac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff ff34 	bl	8002914 <SPI_WaitFifoStateUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab6:	f043 0220 	orr.w	r2, r3, #32
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e000      	b.n	8002ac4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e049      	b.n	8002b72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fd fe9e 	bl	8000834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f000 fba4 	bl	8003258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e049      	b.n	8002c20 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f841 	bl	8002c28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f000 fb4d 	bl	8003258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_TIM_PWM_Start+0x24>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e03c      	b.n	8002cda <HAL_TIM_PWM_Start+0x9e>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d109      	bne.n	8002c7a <HAL_TIM_PWM_Start+0x3e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	e02f      	b.n	8002cda <HAL_TIM_PWM_Start+0x9e>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d109      	bne.n	8002c94 <HAL_TIM_PWM_Start+0x58>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e022      	b.n	8002cda <HAL_TIM_PWM_Start+0x9e>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b0c      	cmp	r3, #12
 8002c98:	d109      	bne.n	8002cae <HAL_TIM_PWM_Start+0x72>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	bf14      	ite	ne
 8002ca6:	2301      	movne	r3, #1
 8002ca8:	2300      	moveq	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	e015      	b.n	8002cda <HAL_TIM_PWM_Start+0x9e>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d109      	bne.n	8002cc8 <HAL_TIM_PWM_Start+0x8c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e008      	b.n	8002cda <HAL_TIM_PWM_Start+0x9e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e097      	b.n	8002e12 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <HAL_TIM_PWM_Start+0xb6>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf0:	e023      	b.n	8002d3a <HAL_TIM_PWM_Start+0xfe>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_PWM_Start+0xc6>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d00:	e01b      	b.n	8002d3a <HAL_TIM_PWM_Start+0xfe>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d104      	bne.n	8002d12 <HAL_TIM_PWM_Start+0xd6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d10:	e013      	b.n	8002d3a <HAL_TIM_PWM_Start+0xfe>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_PWM_Start+0xe6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d20:	e00b      	b.n	8002d3a <HAL_TIM_PWM_Start+0xfe>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_PWM_Start+0xf6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d30:	e003      	b.n	8002d3a <HAL_TIM_PWM_Start+0xfe>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	6839      	ldr	r1, [r7, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 feaa 	bl	8003a9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a33      	ldr	r2, [pc, #204]	; (8002e1c <HAL_TIM_PWM_Start+0x1e0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x13e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a32      	ldr	r2, [pc, #200]	; (8002e20 <HAL_TIM_PWM_Start+0x1e4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x13e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a30      	ldr	r2, [pc, #192]	; (8002e24 <HAL_TIM_PWM_Start+0x1e8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d009      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x13e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <HAL_TIM_PWM_Start+0x1ec>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_TIM_PWM_Start+0x13e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2d      	ldr	r2, [pc, #180]	; (8002e2c <HAL_TIM_PWM_Start+0x1f0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_TIM_PWM_Start+0x142>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_TIM_PWM_Start+0x144>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <HAL_TIM_PWM_Start+0x1e0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d018      	beq.n	8002dd0 <HAL_TIM_PWM_Start+0x194>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da6:	d013      	beq.n	8002dd0 <HAL_TIM_PWM_Start+0x194>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <HAL_TIM_PWM_Start+0x1f4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00e      	beq.n	8002dd0 <HAL_TIM_PWM_Start+0x194>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <HAL_TIM_PWM_Start+0x1f8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_TIM_PWM_Start+0x194>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <HAL_TIM_PWM_Start+0x1e4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIM_PWM_Start+0x194>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a16      	ldr	r2, [pc, #88]	; (8002e24 <HAL_TIM_PWM_Start+0x1e8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d115      	bne.n	8002dfc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <HAL_TIM_PWM_Start+0x1fc>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d015      	beq.n	8002e0e <HAL_TIM_PWM_Start+0x1d2>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d011      	beq.n	8002e0e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfa:	e008      	b.n	8002e0e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e000      	b.n	8002e10 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40013400 	.word	0x40013400
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	00010007 	.word	0x00010007

08002e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e0ff      	b.n	800305a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b14      	cmp	r3, #20
 8002e66:	f200 80f0 	bhi.w	800304a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e6a:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002ec5 	.word	0x08002ec5
 8002e74:	0800304b 	.word	0x0800304b
 8002e78:	0800304b 	.word	0x0800304b
 8002e7c:	0800304b 	.word	0x0800304b
 8002e80:	08002f05 	.word	0x08002f05
 8002e84:	0800304b 	.word	0x0800304b
 8002e88:	0800304b 	.word	0x0800304b
 8002e8c:	0800304b 	.word	0x0800304b
 8002e90:	08002f47 	.word	0x08002f47
 8002e94:	0800304b 	.word	0x0800304b
 8002e98:	0800304b 	.word	0x0800304b
 8002e9c:	0800304b 	.word	0x0800304b
 8002ea0:	08002f87 	.word	0x08002f87
 8002ea4:	0800304b 	.word	0x0800304b
 8002ea8:	0800304b 	.word	0x0800304b
 8002eac:	0800304b 	.word	0x0800304b
 8002eb0:	08002fc9 	.word	0x08002fc9
 8002eb4:	0800304b 	.word	0x0800304b
 8002eb8:	0800304b 	.word	0x0800304b
 8002ebc:	0800304b 	.word	0x0800304b
 8002ec0:	08003009 	.word	0x08003009
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fa54 	bl	8003378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0208 	orr.w	r2, r2, #8
 8002ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0204 	bic.w	r2, r2, #4
 8002eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6999      	ldr	r1, [r3, #24]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	619a      	str	r2, [r3, #24]
      break;
 8002f02:	e0a5      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fac4 	bl	8003498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6999      	ldr	r1, [r3, #24]
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	021a      	lsls	r2, r3, #8
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	619a      	str	r2, [r3, #24]
      break;
 8002f44:	e084      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fb2d 	bl	80035ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0208 	orr.w	r2, r2, #8
 8002f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0204 	bic.w	r2, r2, #4
 8002f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69d9      	ldr	r1, [r3, #28]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	61da      	str	r2, [r3, #28]
      break;
 8002f84:	e064      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fb95 	bl	80036bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69d9      	ldr	r1, [r3, #28]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	021a      	lsls	r2, r3, #8
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	61da      	str	r2, [r3, #28]
      break;
 8002fc6:	e043      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fbfe 	bl	80037d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0208 	orr.w	r2, r2, #8
 8002fe2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0204 	bic.w	r2, r2, #4
 8002ff2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003006:	e023      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fc42 	bl	8003898 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003022:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003032:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	021a      	lsls	r2, r3, #8
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003048:	e002      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	75fb      	strb	r3, [r7, #23]
      break;
 800304e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003058:	7dfb      	ldrb	r3, [r7, #23]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop

08003064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_TIM_ConfigClockSource+0x1c>
 800307c:	2302      	movs	r3, #2
 800307e:	e0de      	b.n	800323e <HAL_TIM_ConfigClockSource+0x1da>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800309e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a63      	ldr	r2, [pc, #396]	; (8003248 <HAL_TIM_ConfigClockSource+0x1e4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	f000 80a9 	beq.w	8003212 <HAL_TIM_ConfigClockSource+0x1ae>
 80030c0:	4a61      	ldr	r2, [pc, #388]	; (8003248 <HAL_TIM_ConfigClockSource+0x1e4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	f200 80ae 	bhi.w	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 80030c8:	4a60      	ldr	r2, [pc, #384]	; (800324c <HAL_TIM_ConfigClockSource+0x1e8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	f000 80a1 	beq.w	8003212 <HAL_TIM_ConfigClockSource+0x1ae>
 80030d0:	4a5e      	ldr	r2, [pc, #376]	; (800324c <HAL_TIM_ConfigClockSource+0x1e8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	f200 80a6 	bhi.w	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 80030d8:	4a5d      	ldr	r2, [pc, #372]	; (8003250 <HAL_TIM_ConfigClockSource+0x1ec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	f000 8099 	beq.w	8003212 <HAL_TIM_ConfigClockSource+0x1ae>
 80030e0:	4a5b      	ldr	r2, [pc, #364]	; (8003250 <HAL_TIM_ConfigClockSource+0x1ec>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	f200 809e 	bhi.w	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 80030e8:	4a5a      	ldr	r2, [pc, #360]	; (8003254 <HAL_TIM_ConfigClockSource+0x1f0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	f000 8091 	beq.w	8003212 <HAL_TIM_ConfigClockSource+0x1ae>
 80030f0:	4a58      	ldr	r2, [pc, #352]	; (8003254 <HAL_TIM_ConfigClockSource+0x1f0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	f200 8096 	bhi.w	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 80030f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80030fc:	f000 8089 	beq.w	8003212 <HAL_TIM_ConfigClockSource+0x1ae>
 8003100:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003104:	f200 808e 	bhi.w	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 8003108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310c:	d03e      	beq.n	800318c <HAL_TIM_ConfigClockSource+0x128>
 800310e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003112:	f200 8087 	bhi.w	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 8003116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311a:	f000 8086 	beq.w	800322a <HAL_TIM_ConfigClockSource+0x1c6>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	d87f      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 8003124:	2b70      	cmp	r3, #112	; 0x70
 8003126:	d01a      	beq.n	800315e <HAL_TIM_ConfigClockSource+0xfa>
 8003128:	2b70      	cmp	r3, #112	; 0x70
 800312a:	d87b      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 800312c:	2b60      	cmp	r3, #96	; 0x60
 800312e:	d050      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
 8003130:	2b60      	cmp	r3, #96	; 0x60
 8003132:	d877      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 8003134:	2b50      	cmp	r3, #80	; 0x50
 8003136:	d03c      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x14e>
 8003138:	2b50      	cmp	r3, #80	; 0x50
 800313a:	d873      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d058      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x18e>
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d86f      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 8003144:	2b30      	cmp	r3, #48	; 0x30
 8003146:	d064      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x1ae>
 8003148:	2b30      	cmp	r3, #48	; 0x30
 800314a:	d86b      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 800314c:	2b20      	cmp	r3, #32
 800314e:	d060      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x1ae>
 8003150:	2b20      	cmp	r3, #32
 8003152:	d867      	bhi.n	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d05c      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x1ae>
 8003158:	2b10      	cmp	r3, #16
 800315a:	d05a      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x1ae>
 800315c:	e062      	b.n	8003224 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6899      	ldr	r1, [r3, #8]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f000 fc75 	bl	8003a5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	609a      	str	r2, [r3, #8]
      break;
 800318a:	e04f      	b.n	800322c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6899      	ldr	r1, [r3, #8]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f000 fc5e 	bl	8003a5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ae:	609a      	str	r2, [r3, #8]
      break;
 80031b0:	e03c      	b.n	800322c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 fbd0 	bl	8003964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2150      	movs	r1, #80	; 0x50
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fc29 	bl	8003a22 <TIM_ITRx_SetConfig>
      break;
 80031d0:	e02c      	b.n	800322c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	461a      	mov	r2, r3
 80031e0:	f000 fbef 	bl	80039c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2160      	movs	r1, #96	; 0x60
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fc19 	bl	8003a22 <TIM_ITRx_SetConfig>
      break;
 80031f0:	e01c      	b.n	800322c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	461a      	mov	r2, r3
 8003200:	f000 fbb0 	bl	8003964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2140      	movs	r1, #64	; 0x40
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fc09 	bl	8003a22 <TIM_ITRx_SetConfig>
      break;
 8003210:	e00c      	b.n	800322c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4619      	mov	r1, r3
 800321c:	4610      	mov	r0, r2
 800321e:	f000 fc00 	bl	8003a22 <TIM_ITRx_SetConfig>
      break;
 8003222:	e003      	b.n	800322c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
      break;
 8003228:	e000      	b.n	800322c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800322a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	00100070 	.word	0x00100070
 800324c:	00100040 	.word	0x00100040
 8003250:	00100030 	.word	0x00100030
 8003254:	00100020 	.word	0x00100020

08003258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3c      	ldr	r2, [pc, #240]	; (800335c <TIM_Base_SetConfig+0x104>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00f      	beq.n	8003290 <TIM_Base_SetConfig+0x38>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003276:	d00b      	beq.n	8003290 <TIM_Base_SetConfig+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a39      	ldr	r2, [pc, #228]	; (8003360 <TIM_Base_SetConfig+0x108>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d007      	beq.n	8003290 <TIM_Base_SetConfig+0x38>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a38      	ldr	r2, [pc, #224]	; (8003364 <TIM_Base_SetConfig+0x10c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_Base_SetConfig+0x38>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a37      	ldr	r2, [pc, #220]	; (8003368 <TIM_Base_SetConfig+0x110>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d108      	bne.n	80032a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2d      	ldr	r2, [pc, #180]	; (800335c <TIM_Base_SetConfig+0x104>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01b      	beq.n	80032e2 <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b0:	d017      	beq.n	80032e2 <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2a      	ldr	r2, [pc, #168]	; (8003360 <TIM_Base_SetConfig+0x108>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a29      	ldr	r2, [pc, #164]	; (8003364 <TIM_Base_SetConfig+0x10c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00f      	beq.n	80032e2 <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a28      	ldr	r2, [pc, #160]	; (8003368 <TIM_Base_SetConfig+0x110>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_Base_SetConfig+0x8a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a27      	ldr	r2, [pc, #156]	; (800336c <TIM_Base_SetConfig+0x114>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <TIM_Base_SetConfig+0x8a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a26      	ldr	r2, [pc, #152]	; (8003370 <TIM_Base_SetConfig+0x118>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0x8a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a25      	ldr	r2, [pc, #148]	; (8003374 <TIM_Base_SetConfig+0x11c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a10      	ldr	r2, [pc, #64]	; (800335c <TIM_Base_SetConfig+0x104>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <TIM_Base_SetConfig+0xe8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a11      	ldr	r2, [pc, #68]	; (8003368 <TIM_Base_SetConfig+0x110>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0xe8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a10      	ldr	r2, [pc, #64]	; (800336c <TIM_Base_SetConfig+0x114>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0xe8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a0f      	ldr	r2, [pc, #60]	; (8003370 <TIM_Base_SetConfig+0x118>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0xe8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <TIM_Base_SetConfig+0x11c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d103      	bne.n	8003348 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	615a      	str	r2, [r3, #20]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40013400 	.word	0x40013400
 800336c:	40014000 	.word	0x40014000
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800

08003378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f023 0201 	bic.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f023 0302 	bic.w	r3, r3, #2
 80033c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a2c      	ldr	r2, [pc, #176]	; (8003484 <TIM_OC1_SetConfig+0x10c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00f      	beq.n	80033f8 <TIM_OC1_SetConfig+0x80>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a2b      	ldr	r2, [pc, #172]	; (8003488 <TIM_OC1_SetConfig+0x110>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00b      	beq.n	80033f8 <TIM_OC1_SetConfig+0x80>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a2a      	ldr	r2, [pc, #168]	; (800348c <TIM_OC1_SetConfig+0x114>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <TIM_OC1_SetConfig+0x80>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a29      	ldr	r2, [pc, #164]	; (8003490 <TIM_OC1_SetConfig+0x118>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_OC1_SetConfig+0x80>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a28      	ldr	r2, [pc, #160]	; (8003494 <TIM_OC1_SetConfig+0x11c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10c      	bne.n	8003412 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0308 	bic.w	r3, r3, #8
 80033fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f023 0304 	bic.w	r3, r3, #4
 8003410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <TIM_OC1_SetConfig+0x10c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00f      	beq.n	800343a <TIM_OC1_SetConfig+0xc2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <TIM_OC1_SetConfig+0x110>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00b      	beq.n	800343a <TIM_OC1_SetConfig+0xc2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <TIM_OC1_SetConfig+0x114>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d007      	beq.n	800343a <TIM_OC1_SetConfig+0xc2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a18      	ldr	r2, [pc, #96]	; (8003490 <TIM_OC1_SetConfig+0x118>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d003      	beq.n	800343a <TIM_OC1_SetConfig+0xc2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a17      	ldr	r2, [pc, #92]	; (8003494 <TIM_OC1_SetConfig+0x11c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d111      	bne.n	800345e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40013400 	.word	0x40013400
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400
 8003494:	40014800 	.word	0x40014800

08003498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f023 0210 	bic.w	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f023 0320 	bic.w	r3, r3, #32
 80034e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a28      	ldr	r2, [pc, #160]	; (8003598 <TIM_OC2_SetConfig+0x100>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_OC2_SetConfig+0x6c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a27      	ldr	r2, [pc, #156]	; (800359c <TIM_OC2_SetConfig+0x104>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d10d      	bne.n	8003520 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800351e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <TIM_OC2_SetConfig+0x100>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00f      	beq.n	8003548 <TIM_OC2_SetConfig+0xb0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a1c      	ldr	r2, [pc, #112]	; (800359c <TIM_OC2_SetConfig+0x104>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00b      	beq.n	8003548 <TIM_OC2_SetConfig+0xb0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <TIM_OC2_SetConfig+0x108>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d007      	beq.n	8003548 <TIM_OC2_SetConfig+0xb0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <TIM_OC2_SetConfig+0x10c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_OC2_SetConfig+0xb0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <TIM_OC2_SetConfig+0x110>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d113      	bne.n	8003570 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800354e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003556:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40013400 	.word	0x40013400
 80035a0:	40014000 	.word	0x40014000
 80035a4:	40014400 	.word	0x40014400
 80035a8:	40014800 	.word	0x40014800

080035ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <TIM_OC3_SetConfig+0xfc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_OC3_SetConfig+0x6a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a26      	ldr	r2, [pc, #152]	; (80036ac <TIM_OC3_SetConfig+0x100>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10d      	bne.n	8003632 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800361c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <TIM_OC3_SetConfig+0xfc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00f      	beq.n	800365a <TIM_OC3_SetConfig+0xae>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <TIM_OC3_SetConfig+0x100>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_OC3_SetConfig+0xae>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <TIM_OC3_SetConfig+0x104>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_OC3_SetConfig+0xae>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <TIM_OC3_SetConfig+0x108>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_OC3_SetConfig+0xae>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <TIM_OC3_SetConfig+0x10c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d113      	bne.n	8003682 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	621a      	str	r2, [r3, #32]
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40013400 	.word	0x40013400
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40014400 	.word	0x40014400
 80036b8:	40014800 	.word	0x40014800

080036bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800370a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	031b      	lsls	r3, r3, #12
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a28      	ldr	r2, [pc, #160]	; (80037bc <TIM_OC4_SetConfig+0x100>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_OC4_SetConfig+0x6c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a27      	ldr	r2, [pc, #156]	; (80037c0 <TIM_OC4_SetConfig+0x104>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10d      	bne.n	8003744 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800372e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	031b      	lsls	r3, r3, #12
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003742:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <TIM_OC4_SetConfig+0x100>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00f      	beq.n	800376c <TIM_OC4_SetConfig+0xb0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <TIM_OC4_SetConfig+0x104>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00b      	beq.n	800376c <TIM_OC4_SetConfig+0xb0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <TIM_OC4_SetConfig+0x108>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_OC4_SetConfig+0xb0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <TIM_OC4_SetConfig+0x10c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_OC4_SetConfig+0xb0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a19      	ldr	r2, [pc, #100]	; (80037cc <TIM_OC4_SetConfig+0x110>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d113      	bne.n	8003794 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003772:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800377a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	019b      	lsls	r3, r3, #6
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	019b      	lsls	r3, r3, #6
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40012c00 	.word	0x40012c00
 80037c0:	40013400 	.word	0x40013400
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40014400 	.word	0x40014400
 80037cc:	40014800 	.word	0x40014800

080037d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003814:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a17      	ldr	r2, [pc, #92]	; (8003884 <TIM_OC5_SetConfig+0xb4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d00f      	beq.n	800384a <TIM_OC5_SetConfig+0x7a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a16      	ldr	r2, [pc, #88]	; (8003888 <TIM_OC5_SetConfig+0xb8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00b      	beq.n	800384a <TIM_OC5_SetConfig+0x7a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a15      	ldr	r2, [pc, #84]	; (800388c <TIM_OC5_SetConfig+0xbc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d007      	beq.n	800384a <TIM_OC5_SetConfig+0x7a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a14      	ldr	r2, [pc, #80]	; (8003890 <TIM_OC5_SetConfig+0xc0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d003      	beq.n	800384a <TIM_OC5_SetConfig+0x7a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <TIM_OC5_SetConfig+0xc4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d109      	bne.n	800385e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003850:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	621a      	str	r2, [r3, #32]
}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40012c00 	.word	0x40012c00
 8003888:	40013400 	.word	0x40013400
 800388c:	40014000 	.word	0x40014000
 8003890:	40014400 	.word	0x40014400
 8003894:	40014800 	.word	0x40014800

08003898 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	051b      	lsls	r3, r3, #20
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a18      	ldr	r2, [pc, #96]	; (8003950 <TIM_OC6_SetConfig+0xb8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00f      	beq.n	8003914 <TIM_OC6_SetConfig+0x7c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a17      	ldr	r2, [pc, #92]	; (8003954 <TIM_OC6_SetConfig+0xbc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00b      	beq.n	8003914 <TIM_OC6_SetConfig+0x7c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a16      	ldr	r2, [pc, #88]	; (8003958 <TIM_OC6_SetConfig+0xc0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_OC6_SetConfig+0x7c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a15      	ldr	r2, [pc, #84]	; (800395c <TIM_OC6_SetConfig+0xc4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_OC6_SetConfig+0x7c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a14      	ldr	r2, [pc, #80]	; (8003960 <TIM_OC6_SetConfig+0xc8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d109      	bne.n	8003928 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800391a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	029b      	lsls	r3, r3, #10
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40012c00 	.word	0x40012c00
 8003954:	40013400 	.word	0x40013400
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800

08003964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0201 	bic.w	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800398e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 030a 	bic.w	r3, r3, #10
 80039a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b087      	sub	sp, #28
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f023 0210 	bic.w	r2, r3, #16
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	031b      	lsls	r3, r3, #12
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f043 0307 	orr.w	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	021a      	lsls	r2, r3, #8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	609a      	str	r2, [r3, #8]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f003 031f 	and.w	r3, r3, #31
 8003aae:	2201      	movs	r2, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1a      	ldr	r2, [r3, #32]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	401a      	ands	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1a      	ldr	r2, [r3, #32]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 031f 	and.w	r3, r3, #31
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e065      	b.n	8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2c      	ldr	r2, [pc, #176]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d108      	bne.n	8003b46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d018      	beq.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b76:	d013      	beq.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10c      	bne.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40013400 	.word	0x40013400
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800
 8003be8:	40014000 	.word	0x40014000

08003bec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003bf4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003bf8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c22:	b084      	sub	sp, #16
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	f107 0014 	add.w	r0, r7, #20
 8003c30:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	b004      	add	sp, #16
 8003c62:	4770      	bx	lr

08003c64 <__errno>:
 8003c64:	4b01      	ldr	r3, [pc, #4]	; (8003c6c <__errno+0x8>)
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	2000000c 	.word	0x2000000c

08003c70 <__libc_init_array>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	4d0d      	ldr	r5, [pc, #52]	; (8003ca8 <__libc_init_array+0x38>)
 8003c74:	4c0d      	ldr	r4, [pc, #52]	; (8003cac <__libc_init_array+0x3c>)
 8003c76:	1b64      	subs	r4, r4, r5
 8003c78:	10a4      	asrs	r4, r4, #2
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	42a6      	cmp	r6, r4
 8003c7e:	d109      	bne.n	8003c94 <__libc_init_array+0x24>
 8003c80:	4d0b      	ldr	r5, [pc, #44]	; (8003cb0 <__libc_init_array+0x40>)
 8003c82:	4c0c      	ldr	r4, [pc, #48]	; (8003cb4 <__libc_init_array+0x44>)
 8003c84:	f000 ffae 	bl	8004be4 <_init>
 8003c88:	1b64      	subs	r4, r4, r5
 8003c8a:	10a4      	asrs	r4, r4, #2
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	42a6      	cmp	r6, r4
 8003c90:	d105      	bne.n	8003c9e <__libc_init_array+0x2e>
 8003c92:	bd70      	pop	{r4, r5, r6, pc}
 8003c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c98:	4798      	blx	r3
 8003c9a:	3601      	adds	r6, #1
 8003c9c:	e7ee      	b.n	8003c7c <__libc_init_array+0xc>
 8003c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca2:	4798      	blx	r3
 8003ca4:	3601      	adds	r6, #1
 8003ca6:	e7f2      	b.n	8003c8e <__libc_init_array+0x1e>
 8003ca8:	08004ca8 	.word	0x08004ca8
 8003cac:	08004ca8 	.word	0x08004ca8
 8003cb0:	08004ca8 	.word	0x08004ca8
 8003cb4:	08004cac 	.word	0x08004cac

08003cb8 <memset>:
 8003cb8:	4402      	add	r2, r0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d100      	bne.n	8003cc2 <memset+0xa>
 8003cc0:	4770      	bx	lr
 8003cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc6:	e7f9      	b.n	8003cbc <memset+0x4>

08003cc8 <iprintf>:
 8003cc8:	b40f      	push	{r0, r1, r2, r3}
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <iprintf+0x2c>)
 8003ccc:	b513      	push	{r0, r1, r4, lr}
 8003cce:	681c      	ldr	r4, [r3, #0]
 8003cd0:	b124      	cbz	r4, 8003cdc <iprintf+0x14>
 8003cd2:	69a3      	ldr	r3, [r4, #24]
 8003cd4:	b913      	cbnz	r3, 8003cdc <iprintf+0x14>
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f000 f866 	bl	8003da8 <__sinit>
 8003cdc:	ab05      	add	r3, sp, #20
 8003cde:	9a04      	ldr	r2, [sp, #16]
 8003ce0:	68a1      	ldr	r1, [r4, #8]
 8003ce2:	9301      	str	r3, [sp, #4]
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f000 f9bd 	bl	8004064 <_vfiprintf_r>
 8003cea:	b002      	add	sp, #8
 8003cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf0:	b004      	add	sp, #16
 8003cf2:	4770      	bx	lr
 8003cf4:	2000000c 	.word	0x2000000c

08003cf8 <std>:
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	b510      	push	{r4, lr}
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8003d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d06:	6083      	str	r3, [r0, #8]
 8003d08:	8181      	strh	r1, [r0, #12]
 8003d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d0c:	81c2      	strh	r2, [r0, #14]
 8003d0e:	6183      	str	r3, [r0, #24]
 8003d10:	4619      	mov	r1, r3
 8003d12:	2208      	movs	r2, #8
 8003d14:	305c      	adds	r0, #92	; 0x5c
 8003d16:	f7ff ffcf 	bl	8003cb8 <memset>
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <std+0x38>)
 8003d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <std+0x3c>)
 8003d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <std+0x40>)
 8003d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <std+0x44>)
 8003d28:	6224      	str	r4, [r4, #32]
 8003d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d2c:	bd10      	pop	{r4, pc}
 8003d2e:	bf00      	nop
 8003d30:	0800460d 	.word	0x0800460d
 8003d34:	0800462f 	.word	0x0800462f
 8003d38:	08004667 	.word	0x08004667
 8003d3c:	0800468b 	.word	0x0800468b

08003d40 <_cleanup_r>:
 8003d40:	4901      	ldr	r1, [pc, #4]	; (8003d48 <_cleanup_r+0x8>)
 8003d42:	f000 b8af 	b.w	8003ea4 <_fwalk_reent>
 8003d46:	bf00      	nop
 8003d48:	08004965 	.word	0x08004965

08003d4c <__sfmoreglue>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	2268      	movs	r2, #104	; 0x68
 8003d50:	1e4d      	subs	r5, r1, #1
 8003d52:	4355      	muls	r5, r2
 8003d54:	460e      	mov	r6, r1
 8003d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d5a:	f000 f8e5 	bl	8003f28 <_malloc_r>
 8003d5e:	4604      	mov	r4, r0
 8003d60:	b140      	cbz	r0, 8003d74 <__sfmoreglue+0x28>
 8003d62:	2100      	movs	r1, #0
 8003d64:	e9c0 1600 	strd	r1, r6, [r0]
 8003d68:	300c      	adds	r0, #12
 8003d6a:	60a0      	str	r0, [r4, #8]
 8003d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d70:	f7ff ffa2 	bl	8003cb8 <memset>
 8003d74:	4620      	mov	r0, r4
 8003d76:	bd70      	pop	{r4, r5, r6, pc}

08003d78 <__sfp_lock_acquire>:
 8003d78:	4801      	ldr	r0, [pc, #4]	; (8003d80 <__sfp_lock_acquire+0x8>)
 8003d7a:	f000 b8b3 	b.w	8003ee4 <__retarget_lock_acquire_recursive>
 8003d7e:	bf00      	nop
 8003d80:	20000439 	.word	0x20000439

08003d84 <__sfp_lock_release>:
 8003d84:	4801      	ldr	r0, [pc, #4]	; (8003d8c <__sfp_lock_release+0x8>)
 8003d86:	f000 b8ae 	b.w	8003ee6 <__retarget_lock_release_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	20000439 	.word	0x20000439

08003d90 <__sinit_lock_acquire>:
 8003d90:	4801      	ldr	r0, [pc, #4]	; (8003d98 <__sinit_lock_acquire+0x8>)
 8003d92:	f000 b8a7 	b.w	8003ee4 <__retarget_lock_acquire_recursive>
 8003d96:	bf00      	nop
 8003d98:	2000043a 	.word	0x2000043a

08003d9c <__sinit_lock_release>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__sinit_lock_release+0x8>)
 8003d9e:	f000 b8a2 	b.w	8003ee6 <__retarget_lock_release_recursive>
 8003da2:	bf00      	nop
 8003da4:	2000043a 	.word	0x2000043a

08003da8 <__sinit>:
 8003da8:	b510      	push	{r4, lr}
 8003daa:	4604      	mov	r4, r0
 8003dac:	f7ff fff0 	bl	8003d90 <__sinit_lock_acquire>
 8003db0:	69a3      	ldr	r3, [r4, #24]
 8003db2:	b11b      	cbz	r3, 8003dbc <__sinit+0x14>
 8003db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db8:	f7ff bff0 	b.w	8003d9c <__sinit_lock_release>
 8003dbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003dc0:	6523      	str	r3, [r4, #80]	; 0x50
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <__sinit+0x68>)
 8003dc4:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <__sinit+0x6c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8003dca:	42a3      	cmp	r3, r4
 8003dcc:	bf04      	itt	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	61a3      	streq	r3, [r4, #24]
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f000 f820 	bl	8003e18 <__sfp>
 8003dd8:	6060      	str	r0, [r4, #4]
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f000 f81c 	bl	8003e18 <__sfp>
 8003de0:	60a0      	str	r0, [r4, #8]
 8003de2:	4620      	mov	r0, r4
 8003de4:	f000 f818 	bl	8003e18 <__sfp>
 8003de8:	2200      	movs	r2, #0
 8003dea:	60e0      	str	r0, [r4, #12]
 8003dec:	2104      	movs	r1, #4
 8003dee:	6860      	ldr	r0, [r4, #4]
 8003df0:	f7ff ff82 	bl	8003cf8 <std>
 8003df4:	68a0      	ldr	r0, [r4, #8]
 8003df6:	2201      	movs	r2, #1
 8003df8:	2109      	movs	r1, #9
 8003dfa:	f7ff ff7d 	bl	8003cf8 <std>
 8003dfe:	68e0      	ldr	r0, [r4, #12]
 8003e00:	2202      	movs	r2, #2
 8003e02:	2112      	movs	r1, #18
 8003e04:	f7ff ff78 	bl	8003cf8 <std>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	61a3      	str	r3, [r4, #24]
 8003e0c:	e7d2      	b.n	8003db4 <__sinit+0xc>
 8003e0e:	bf00      	nop
 8003e10:	08004c10 	.word	0x08004c10
 8003e14:	08003d41 	.word	0x08003d41

08003e18 <__sfp>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	4607      	mov	r7, r0
 8003e1c:	f7ff ffac 	bl	8003d78 <__sfp_lock_acquire>
 8003e20:	4b1e      	ldr	r3, [pc, #120]	; (8003e9c <__sfp+0x84>)
 8003e22:	681e      	ldr	r6, [r3, #0]
 8003e24:	69b3      	ldr	r3, [r6, #24]
 8003e26:	b913      	cbnz	r3, 8003e2e <__sfp+0x16>
 8003e28:	4630      	mov	r0, r6
 8003e2a:	f7ff ffbd 	bl	8003da8 <__sinit>
 8003e2e:	3648      	adds	r6, #72	; 0x48
 8003e30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	d503      	bpl.n	8003e40 <__sfp+0x28>
 8003e38:	6833      	ldr	r3, [r6, #0]
 8003e3a:	b30b      	cbz	r3, 8003e80 <__sfp+0x68>
 8003e3c:	6836      	ldr	r6, [r6, #0]
 8003e3e:	e7f7      	b.n	8003e30 <__sfp+0x18>
 8003e40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e44:	b9d5      	cbnz	r5, 8003e7c <__sfp+0x64>
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <__sfp+0x88>)
 8003e48:	60e3      	str	r3, [r4, #12]
 8003e4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e4e:	6665      	str	r5, [r4, #100]	; 0x64
 8003e50:	f000 f847 	bl	8003ee2 <__retarget_lock_init_recursive>
 8003e54:	f7ff ff96 	bl	8003d84 <__sfp_lock_release>
 8003e58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e60:	6025      	str	r5, [r4, #0]
 8003e62:	61a5      	str	r5, [r4, #24]
 8003e64:	2208      	movs	r2, #8
 8003e66:	4629      	mov	r1, r5
 8003e68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e6c:	f7ff ff24 	bl	8003cb8 <memset>
 8003e70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e78:	4620      	mov	r0, r4
 8003e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e7c:	3468      	adds	r4, #104	; 0x68
 8003e7e:	e7d9      	b.n	8003e34 <__sfp+0x1c>
 8003e80:	2104      	movs	r1, #4
 8003e82:	4638      	mov	r0, r7
 8003e84:	f7ff ff62 	bl	8003d4c <__sfmoreglue>
 8003e88:	4604      	mov	r4, r0
 8003e8a:	6030      	str	r0, [r6, #0]
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d1d5      	bne.n	8003e3c <__sfp+0x24>
 8003e90:	f7ff ff78 	bl	8003d84 <__sfp_lock_release>
 8003e94:	230c      	movs	r3, #12
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	e7ee      	b.n	8003e78 <__sfp+0x60>
 8003e9a:	bf00      	nop
 8003e9c:	08004c10 	.word	0x08004c10
 8003ea0:	ffff0001 	.word	0xffff0001

08003ea4 <_fwalk_reent>:
 8003ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea8:	4606      	mov	r6, r0
 8003eaa:	4688      	mov	r8, r1
 8003eac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003eb0:	2700      	movs	r7, #0
 8003eb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003eb6:	f1b9 0901 	subs.w	r9, r9, #1
 8003eba:	d505      	bpl.n	8003ec8 <_fwalk_reent+0x24>
 8003ebc:	6824      	ldr	r4, [r4, #0]
 8003ebe:	2c00      	cmp	r4, #0
 8003ec0:	d1f7      	bne.n	8003eb2 <_fwalk_reent+0xe>
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ec8:	89ab      	ldrh	r3, [r5, #12]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d907      	bls.n	8003ede <_fwalk_reent+0x3a>
 8003ece:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	d003      	beq.n	8003ede <_fwalk_reent+0x3a>
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4630      	mov	r0, r6
 8003eda:	47c0      	blx	r8
 8003edc:	4307      	orrs	r7, r0
 8003ede:	3568      	adds	r5, #104	; 0x68
 8003ee0:	e7e9      	b.n	8003eb6 <_fwalk_reent+0x12>

08003ee2 <__retarget_lock_init_recursive>:
 8003ee2:	4770      	bx	lr

08003ee4 <__retarget_lock_acquire_recursive>:
 8003ee4:	4770      	bx	lr

08003ee6 <__retarget_lock_release_recursive>:
 8003ee6:	4770      	bx	lr

08003ee8 <sbrk_aligned>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	4e0e      	ldr	r6, [pc, #56]	; (8003f24 <sbrk_aligned+0x3c>)
 8003eec:	460c      	mov	r4, r1
 8003eee:	6831      	ldr	r1, [r6, #0]
 8003ef0:	4605      	mov	r5, r0
 8003ef2:	b911      	cbnz	r1, 8003efa <sbrk_aligned+0x12>
 8003ef4:	f000 fb7a 	bl	80045ec <_sbrk_r>
 8003ef8:	6030      	str	r0, [r6, #0]
 8003efa:	4621      	mov	r1, r4
 8003efc:	4628      	mov	r0, r5
 8003efe:	f000 fb75 	bl	80045ec <_sbrk_r>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d00a      	beq.n	8003f1c <sbrk_aligned+0x34>
 8003f06:	1cc4      	adds	r4, r0, #3
 8003f08:	f024 0403 	bic.w	r4, r4, #3
 8003f0c:	42a0      	cmp	r0, r4
 8003f0e:	d007      	beq.n	8003f20 <sbrk_aligned+0x38>
 8003f10:	1a21      	subs	r1, r4, r0
 8003f12:	4628      	mov	r0, r5
 8003f14:	f000 fb6a 	bl	80045ec <_sbrk_r>
 8003f18:	3001      	adds	r0, #1
 8003f1a:	d101      	bne.n	8003f20 <sbrk_aligned+0x38>
 8003f1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003f20:	4620      	mov	r0, r4
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	20000440 	.word	0x20000440

08003f28 <_malloc_r>:
 8003f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2c:	1ccd      	adds	r5, r1, #3
 8003f2e:	f025 0503 	bic.w	r5, r5, #3
 8003f32:	3508      	adds	r5, #8
 8003f34:	2d0c      	cmp	r5, #12
 8003f36:	bf38      	it	cc
 8003f38:	250c      	movcc	r5, #12
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	4607      	mov	r7, r0
 8003f3e:	db01      	blt.n	8003f44 <_malloc_r+0x1c>
 8003f40:	42a9      	cmp	r1, r5
 8003f42:	d905      	bls.n	8003f50 <_malloc_r+0x28>
 8003f44:	230c      	movs	r3, #12
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	2600      	movs	r6, #0
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f50:	4e2e      	ldr	r6, [pc, #184]	; (800400c <_malloc_r+0xe4>)
 8003f52:	f000 fdbb 	bl	8004acc <__malloc_lock>
 8003f56:	6833      	ldr	r3, [r6, #0]
 8003f58:	461c      	mov	r4, r3
 8003f5a:	bb34      	cbnz	r4, 8003faa <_malloc_r+0x82>
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	4638      	mov	r0, r7
 8003f60:	f7ff ffc2 	bl	8003ee8 <sbrk_aligned>
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	4604      	mov	r4, r0
 8003f68:	d14d      	bne.n	8004006 <_malloc_r+0xde>
 8003f6a:	6834      	ldr	r4, [r6, #0]
 8003f6c:	4626      	mov	r6, r4
 8003f6e:	2e00      	cmp	r6, #0
 8003f70:	d140      	bne.n	8003ff4 <_malloc_r+0xcc>
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	4631      	mov	r1, r6
 8003f76:	4638      	mov	r0, r7
 8003f78:	eb04 0803 	add.w	r8, r4, r3
 8003f7c:	f000 fb36 	bl	80045ec <_sbrk_r>
 8003f80:	4580      	cmp	r8, r0
 8003f82:	d13a      	bne.n	8003ffa <_malloc_r+0xd2>
 8003f84:	6821      	ldr	r1, [r4, #0]
 8003f86:	3503      	adds	r5, #3
 8003f88:	1a6d      	subs	r5, r5, r1
 8003f8a:	f025 0503 	bic.w	r5, r5, #3
 8003f8e:	3508      	adds	r5, #8
 8003f90:	2d0c      	cmp	r5, #12
 8003f92:	bf38      	it	cc
 8003f94:	250c      	movcc	r5, #12
 8003f96:	4629      	mov	r1, r5
 8003f98:	4638      	mov	r0, r7
 8003f9a:	f7ff ffa5 	bl	8003ee8 <sbrk_aligned>
 8003f9e:	3001      	adds	r0, #1
 8003fa0:	d02b      	beq.n	8003ffa <_malloc_r+0xd2>
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	442b      	add	r3, r5
 8003fa6:	6023      	str	r3, [r4, #0]
 8003fa8:	e00e      	b.n	8003fc8 <_malloc_r+0xa0>
 8003faa:	6822      	ldr	r2, [r4, #0]
 8003fac:	1b52      	subs	r2, r2, r5
 8003fae:	d41e      	bmi.n	8003fee <_malloc_r+0xc6>
 8003fb0:	2a0b      	cmp	r2, #11
 8003fb2:	d916      	bls.n	8003fe2 <_malloc_r+0xba>
 8003fb4:	1961      	adds	r1, r4, r5
 8003fb6:	42a3      	cmp	r3, r4
 8003fb8:	6025      	str	r5, [r4, #0]
 8003fba:	bf18      	it	ne
 8003fbc:	6059      	strne	r1, [r3, #4]
 8003fbe:	6863      	ldr	r3, [r4, #4]
 8003fc0:	bf08      	it	eq
 8003fc2:	6031      	streq	r1, [r6, #0]
 8003fc4:	5162      	str	r2, [r4, r5]
 8003fc6:	604b      	str	r3, [r1, #4]
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f104 060b 	add.w	r6, r4, #11
 8003fce:	f000 fd83 	bl	8004ad8 <__malloc_unlock>
 8003fd2:	f026 0607 	bic.w	r6, r6, #7
 8003fd6:	1d23      	adds	r3, r4, #4
 8003fd8:	1af2      	subs	r2, r6, r3
 8003fda:	d0b6      	beq.n	8003f4a <_malloc_r+0x22>
 8003fdc:	1b9b      	subs	r3, r3, r6
 8003fde:	50a3      	str	r3, [r4, r2]
 8003fe0:	e7b3      	b.n	8003f4a <_malloc_r+0x22>
 8003fe2:	6862      	ldr	r2, [r4, #4]
 8003fe4:	42a3      	cmp	r3, r4
 8003fe6:	bf0c      	ite	eq
 8003fe8:	6032      	streq	r2, [r6, #0]
 8003fea:	605a      	strne	r2, [r3, #4]
 8003fec:	e7ec      	b.n	8003fc8 <_malloc_r+0xa0>
 8003fee:	4623      	mov	r3, r4
 8003ff0:	6864      	ldr	r4, [r4, #4]
 8003ff2:	e7b2      	b.n	8003f5a <_malloc_r+0x32>
 8003ff4:	4634      	mov	r4, r6
 8003ff6:	6876      	ldr	r6, [r6, #4]
 8003ff8:	e7b9      	b.n	8003f6e <_malloc_r+0x46>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	4638      	mov	r0, r7
 8004000:	f000 fd6a 	bl	8004ad8 <__malloc_unlock>
 8004004:	e7a1      	b.n	8003f4a <_malloc_r+0x22>
 8004006:	6025      	str	r5, [r4, #0]
 8004008:	e7de      	b.n	8003fc8 <_malloc_r+0xa0>
 800400a:	bf00      	nop
 800400c:	2000043c 	.word	0x2000043c

08004010 <__sfputc_r>:
 8004010:	6893      	ldr	r3, [r2, #8]
 8004012:	3b01      	subs	r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	b410      	push	{r4}
 8004018:	6093      	str	r3, [r2, #8]
 800401a:	da08      	bge.n	800402e <__sfputc_r+0x1e>
 800401c:	6994      	ldr	r4, [r2, #24]
 800401e:	42a3      	cmp	r3, r4
 8004020:	db01      	blt.n	8004026 <__sfputc_r+0x16>
 8004022:	290a      	cmp	r1, #10
 8004024:	d103      	bne.n	800402e <__sfputc_r+0x1e>
 8004026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800402a:	f000 bb33 	b.w	8004694 <__swbuf_r>
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	1c58      	adds	r0, r3, #1
 8004032:	6010      	str	r0, [r2, #0]
 8004034:	7019      	strb	r1, [r3, #0]
 8004036:	4608      	mov	r0, r1
 8004038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800403c:	4770      	bx	lr

0800403e <__sfputs_r>:
 800403e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004040:	4606      	mov	r6, r0
 8004042:	460f      	mov	r7, r1
 8004044:	4614      	mov	r4, r2
 8004046:	18d5      	adds	r5, r2, r3
 8004048:	42ac      	cmp	r4, r5
 800404a:	d101      	bne.n	8004050 <__sfputs_r+0x12>
 800404c:	2000      	movs	r0, #0
 800404e:	e007      	b.n	8004060 <__sfputs_r+0x22>
 8004050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004054:	463a      	mov	r2, r7
 8004056:	4630      	mov	r0, r6
 8004058:	f7ff ffda 	bl	8004010 <__sfputc_r>
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	d1f3      	bne.n	8004048 <__sfputs_r+0xa>
 8004060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004064 <_vfiprintf_r>:
 8004064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004068:	460d      	mov	r5, r1
 800406a:	b09d      	sub	sp, #116	; 0x74
 800406c:	4614      	mov	r4, r2
 800406e:	4698      	mov	r8, r3
 8004070:	4606      	mov	r6, r0
 8004072:	b118      	cbz	r0, 800407c <_vfiprintf_r+0x18>
 8004074:	6983      	ldr	r3, [r0, #24]
 8004076:	b90b      	cbnz	r3, 800407c <_vfiprintf_r+0x18>
 8004078:	f7ff fe96 	bl	8003da8 <__sinit>
 800407c:	4b89      	ldr	r3, [pc, #548]	; (80042a4 <_vfiprintf_r+0x240>)
 800407e:	429d      	cmp	r5, r3
 8004080:	d11b      	bne.n	80040ba <_vfiprintf_r+0x56>
 8004082:	6875      	ldr	r5, [r6, #4]
 8004084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004086:	07d9      	lsls	r1, r3, #31
 8004088:	d405      	bmi.n	8004096 <_vfiprintf_r+0x32>
 800408a:	89ab      	ldrh	r3, [r5, #12]
 800408c:	059a      	lsls	r2, r3, #22
 800408e:	d402      	bmi.n	8004096 <_vfiprintf_r+0x32>
 8004090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004092:	f7ff ff27 	bl	8003ee4 <__retarget_lock_acquire_recursive>
 8004096:	89ab      	ldrh	r3, [r5, #12]
 8004098:	071b      	lsls	r3, r3, #28
 800409a:	d501      	bpl.n	80040a0 <_vfiprintf_r+0x3c>
 800409c:	692b      	ldr	r3, [r5, #16]
 800409e:	b9eb      	cbnz	r3, 80040dc <_vfiprintf_r+0x78>
 80040a0:	4629      	mov	r1, r5
 80040a2:	4630      	mov	r0, r6
 80040a4:	f000 fb5a 	bl	800475c <__swsetup_r>
 80040a8:	b1c0      	cbz	r0, 80040dc <_vfiprintf_r+0x78>
 80040aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040ac:	07dc      	lsls	r4, r3, #31
 80040ae:	d50e      	bpl.n	80040ce <_vfiprintf_r+0x6a>
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b4:	b01d      	add	sp, #116	; 0x74
 80040b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ba:	4b7b      	ldr	r3, [pc, #492]	; (80042a8 <_vfiprintf_r+0x244>)
 80040bc:	429d      	cmp	r5, r3
 80040be:	d101      	bne.n	80040c4 <_vfiprintf_r+0x60>
 80040c0:	68b5      	ldr	r5, [r6, #8]
 80040c2:	e7df      	b.n	8004084 <_vfiprintf_r+0x20>
 80040c4:	4b79      	ldr	r3, [pc, #484]	; (80042ac <_vfiprintf_r+0x248>)
 80040c6:	429d      	cmp	r5, r3
 80040c8:	bf08      	it	eq
 80040ca:	68f5      	ldreq	r5, [r6, #12]
 80040cc:	e7da      	b.n	8004084 <_vfiprintf_r+0x20>
 80040ce:	89ab      	ldrh	r3, [r5, #12]
 80040d0:	0598      	lsls	r0, r3, #22
 80040d2:	d4ed      	bmi.n	80040b0 <_vfiprintf_r+0x4c>
 80040d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040d6:	f7ff ff06 	bl	8003ee6 <__retarget_lock_release_recursive>
 80040da:	e7e9      	b.n	80040b0 <_vfiprintf_r+0x4c>
 80040dc:	2300      	movs	r3, #0
 80040de:	9309      	str	r3, [sp, #36]	; 0x24
 80040e0:	2320      	movs	r3, #32
 80040e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80040ea:	2330      	movs	r3, #48	; 0x30
 80040ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80042b0 <_vfiprintf_r+0x24c>
 80040f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040f4:	f04f 0901 	mov.w	r9, #1
 80040f8:	4623      	mov	r3, r4
 80040fa:	469a      	mov	sl, r3
 80040fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004100:	b10a      	cbz	r2, 8004106 <_vfiprintf_r+0xa2>
 8004102:	2a25      	cmp	r2, #37	; 0x25
 8004104:	d1f9      	bne.n	80040fa <_vfiprintf_r+0x96>
 8004106:	ebba 0b04 	subs.w	fp, sl, r4
 800410a:	d00b      	beq.n	8004124 <_vfiprintf_r+0xc0>
 800410c:	465b      	mov	r3, fp
 800410e:	4622      	mov	r2, r4
 8004110:	4629      	mov	r1, r5
 8004112:	4630      	mov	r0, r6
 8004114:	f7ff ff93 	bl	800403e <__sfputs_r>
 8004118:	3001      	adds	r0, #1
 800411a:	f000 80aa 	beq.w	8004272 <_vfiprintf_r+0x20e>
 800411e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004120:	445a      	add	r2, fp
 8004122:	9209      	str	r2, [sp, #36]	; 0x24
 8004124:	f89a 3000 	ldrb.w	r3, [sl]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80a2 	beq.w	8004272 <_vfiprintf_r+0x20e>
 800412e:	2300      	movs	r3, #0
 8004130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004138:	f10a 0a01 	add.w	sl, sl, #1
 800413c:	9304      	str	r3, [sp, #16]
 800413e:	9307      	str	r3, [sp, #28]
 8004140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004144:	931a      	str	r3, [sp, #104]	; 0x68
 8004146:	4654      	mov	r4, sl
 8004148:	2205      	movs	r2, #5
 800414a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414e:	4858      	ldr	r0, [pc, #352]	; (80042b0 <_vfiprintf_r+0x24c>)
 8004150:	f7fc f866 	bl	8000220 <memchr>
 8004154:	9a04      	ldr	r2, [sp, #16]
 8004156:	b9d8      	cbnz	r0, 8004190 <_vfiprintf_r+0x12c>
 8004158:	06d1      	lsls	r1, r2, #27
 800415a:	bf44      	itt	mi
 800415c:	2320      	movmi	r3, #32
 800415e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004162:	0713      	lsls	r3, r2, #28
 8004164:	bf44      	itt	mi
 8004166:	232b      	movmi	r3, #43	; 0x2b
 8004168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800416c:	f89a 3000 	ldrb.w	r3, [sl]
 8004170:	2b2a      	cmp	r3, #42	; 0x2a
 8004172:	d015      	beq.n	80041a0 <_vfiprintf_r+0x13c>
 8004174:	9a07      	ldr	r2, [sp, #28]
 8004176:	4654      	mov	r4, sl
 8004178:	2000      	movs	r0, #0
 800417a:	f04f 0c0a 	mov.w	ip, #10
 800417e:	4621      	mov	r1, r4
 8004180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004184:	3b30      	subs	r3, #48	; 0x30
 8004186:	2b09      	cmp	r3, #9
 8004188:	d94e      	bls.n	8004228 <_vfiprintf_r+0x1c4>
 800418a:	b1b0      	cbz	r0, 80041ba <_vfiprintf_r+0x156>
 800418c:	9207      	str	r2, [sp, #28]
 800418e:	e014      	b.n	80041ba <_vfiprintf_r+0x156>
 8004190:	eba0 0308 	sub.w	r3, r0, r8
 8004194:	fa09 f303 	lsl.w	r3, r9, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	9304      	str	r3, [sp, #16]
 800419c:	46a2      	mov	sl, r4
 800419e:	e7d2      	b.n	8004146 <_vfiprintf_r+0xe2>
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	1d19      	adds	r1, r3, #4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	9103      	str	r1, [sp, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bfbb      	ittet	lt
 80041ac:	425b      	neglt	r3, r3
 80041ae:	f042 0202 	orrlt.w	r2, r2, #2
 80041b2:	9307      	strge	r3, [sp, #28]
 80041b4:	9307      	strlt	r3, [sp, #28]
 80041b6:	bfb8      	it	lt
 80041b8:	9204      	strlt	r2, [sp, #16]
 80041ba:	7823      	ldrb	r3, [r4, #0]
 80041bc:	2b2e      	cmp	r3, #46	; 0x2e
 80041be:	d10c      	bne.n	80041da <_vfiprintf_r+0x176>
 80041c0:	7863      	ldrb	r3, [r4, #1]
 80041c2:	2b2a      	cmp	r3, #42	; 0x2a
 80041c4:	d135      	bne.n	8004232 <_vfiprintf_r+0x1ce>
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	9203      	str	r2, [sp, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bfb8      	it	lt
 80041d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041d6:	3402      	adds	r4, #2
 80041d8:	9305      	str	r3, [sp, #20]
 80041da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80042c0 <_vfiprintf_r+0x25c>
 80041de:	7821      	ldrb	r1, [r4, #0]
 80041e0:	2203      	movs	r2, #3
 80041e2:	4650      	mov	r0, sl
 80041e4:	f7fc f81c 	bl	8000220 <memchr>
 80041e8:	b140      	cbz	r0, 80041fc <_vfiprintf_r+0x198>
 80041ea:	2340      	movs	r3, #64	; 0x40
 80041ec:	eba0 000a 	sub.w	r0, r0, sl
 80041f0:	fa03 f000 	lsl.w	r0, r3, r0
 80041f4:	9b04      	ldr	r3, [sp, #16]
 80041f6:	4303      	orrs	r3, r0
 80041f8:	3401      	adds	r4, #1
 80041fa:	9304      	str	r3, [sp, #16]
 80041fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004200:	482c      	ldr	r0, [pc, #176]	; (80042b4 <_vfiprintf_r+0x250>)
 8004202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004206:	2206      	movs	r2, #6
 8004208:	f7fc f80a 	bl	8000220 <memchr>
 800420c:	2800      	cmp	r0, #0
 800420e:	d03f      	beq.n	8004290 <_vfiprintf_r+0x22c>
 8004210:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <_vfiprintf_r+0x254>)
 8004212:	bb1b      	cbnz	r3, 800425c <_vfiprintf_r+0x1f8>
 8004214:	9b03      	ldr	r3, [sp, #12]
 8004216:	3307      	adds	r3, #7
 8004218:	f023 0307 	bic.w	r3, r3, #7
 800421c:	3308      	adds	r3, #8
 800421e:	9303      	str	r3, [sp, #12]
 8004220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004222:	443b      	add	r3, r7
 8004224:	9309      	str	r3, [sp, #36]	; 0x24
 8004226:	e767      	b.n	80040f8 <_vfiprintf_r+0x94>
 8004228:	fb0c 3202 	mla	r2, ip, r2, r3
 800422c:	460c      	mov	r4, r1
 800422e:	2001      	movs	r0, #1
 8004230:	e7a5      	b.n	800417e <_vfiprintf_r+0x11a>
 8004232:	2300      	movs	r3, #0
 8004234:	3401      	adds	r4, #1
 8004236:	9305      	str	r3, [sp, #20]
 8004238:	4619      	mov	r1, r3
 800423a:	f04f 0c0a 	mov.w	ip, #10
 800423e:	4620      	mov	r0, r4
 8004240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004244:	3a30      	subs	r2, #48	; 0x30
 8004246:	2a09      	cmp	r2, #9
 8004248:	d903      	bls.n	8004252 <_vfiprintf_r+0x1ee>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0c5      	beq.n	80041da <_vfiprintf_r+0x176>
 800424e:	9105      	str	r1, [sp, #20]
 8004250:	e7c3      	b.n	80041da <_vfiprintf_r+0x176>
 8004252:	fb0c 2101 	mla	r1, ip, r1, r2
 8004256:	4604      	mov	r4, r0
 8004258:	2301      	movs	r3, #1
 800425a:	e7f0      	b.n	800423e <_vfiprintf_r+0x1da>
 800425c:	ab03      	add	r3, sp, #12
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	462a      	mov	r2, r5
 8004262:	4b16      	ldr	r3, [pc, #88]	; (80042bc <_vfiprintf_r+0x258>)
 8004264:	a904      	add	r1, sp, #16
 8004266:	4630      	mov	r0, r6
 8004268:	f3af 8000 	nop.w
 800426c:	4607      	mov	r7, r0
 800426e:	1c78      	adds	r0, r7, #1
 8004270:	d1d6      	bne.n	8004220 <_vfiprintf_r+0x1bc>
 8004272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004274:	07d9      	lsls	r1, r3, #31
 8004276:	d405      	bmi.n	8004284 <_vfiprintf_r+0x220>
 8004278:	89ab      	ldrh	r3, [r5, #12]
 800427a:	059a      	lsls	r2, r3, #22
 800427c:	d402      	bmi.n	8004284 <_vfiprintf_r+0x220>
 800427e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004280:	f7ff fe31 	bl	8003ee6 <__retarget_lock_release_recursive>
 8004284:	89ab      	ldrh	r3, [r5, #12]
 8004286:	065b      	lsls	r3, r3, #25
 8004288:	f53f af12 	bmi.w	80040b0 <_vfiprintf_r+0x4c>
 800428c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800428e:	e711      	b.n	80040b4 <_vfiprintf_r+0x50>
 8004290:	ab03      	add	r3, sp, #12
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	462a      	mov	r2, r5
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <_vfiprintf_r+0x258>)
 8004298:	a904      	add	r1, sp, #16
 800429a:	4630      	mov	r0, r6
 800429c:	f000 f880 	bl	80043a0 <_printf_i>
 80042a0:	e7e4      	b.n	800426c <_vfiprintf_r+0x208>
 80042a2:	bf00      	nop
 80042a4:	08004c34 	.word	0x08004c34
 80042a8:	08004c54 	.word	0x08004c54
 80042ac:	08004c14 	.word	0x08004c14
 80042b0:	08004c74 	.word	0x08004c74
 80042b4:	08004c7e 	.word	0x08004c7e
 80042b8:	00000000 	.word	0x00000000
 80042bc:	0800403f 	.word	0x0800403f
 80042c0:	08004c7a 	.word	0x08004c7a

080042c4 <_printf_common>:
 80042c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c8:	4616      	mov	r6, r2
 80042ca:	4699      	mov	r9, r3
 80042cc:	688a      	ldr	r2, [r1, #8]
 80042ce:	690b      	ldr	r3, [r1, #16]
 80042d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042d4:	4293      	cmp	r3, r2
 80042d6:	bfb8      	it	lt
 80042d8:	4613      	movlt	r3, r2
 80042da:	6033      	str	r3, [r6, #0]
 80042dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042e0:	4607      	mov	r7, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	b10a      	cbz	r2, 80042ea <_printf_common+0x26>
 80042e6:	3301      	adds	r3, #1
 80042e8:	6033      	str	r3, [r6, #0]
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	0699      	lsls	r1, r3, #26
 80042ee:	bf42      	ittt	mi
 80042f0:	6833      	ldrmi	r3, [r6, #0]
 80042f2:	3302      	addmi	r3, #2
 80042f4:	6033      	strmi	r3, [r6, #0]
 80042f6:	6825      	ldr	r5, [r4, #0]
 80042f8:	f015 0506 	ands.w	r5, r5, #6
 80042fc:	d106      	bne.n	800430c <_printf_common+0x48>
 80042fe:	f104 0a19 	add.w	sl, r4, #25
 8004302:	68e3      	ldr	r3, [r4, #12]
 8004304:	6832      	ldr	r2, [r6, #0]
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	42ab      	cmp	r3, r5
 800430a:	dc26      	bgt.n	800435a <_printf_common+0x96>
 800430c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004310:	1e13      	subs	r3, r2, #0
 8004312:	6822      	ldr	r2, [r4, #0]
 8004314:	bf18      	it	ne
 8004316:	2301      	movne	r3, #1
 8004318:	0692      	lsls	r2, r2, #26
 800431a:	d42b      	bmi.n	8004374 <_printf_common+0xb0>
 800431c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004320:	4649      	mov	r1, r9
 8004322:	4638      	mov	r0, r7
 8004324:	47c0      	blx	r8
 8004326:	3001      	adds	r0, #1
 8004328:	d01e      	beq.n	8004368 <_printf_common+0xa4>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	68e5      	ldr	r5, [r4, #12]
 800432e:	6832      	ldr	r2, [r6, #0]
 8004330:	f003 0306 	and.w	r3, r3, #6
 8004334:	2b04      	cmp	r3, #4
 8004336:	bf08      	it	eq
 8004338:	1aad      	subeq	r5, r5, r2
 800433a:	68a3      	ldr	r3, [r4, #8]
 800433c:	6922      	ldr	r2, [r4, #16]
 800433e:	bf0c      	ite	eq
 8004340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004344:	2500      	movne	r5, #0
 8004346:	4293      	cmp	r3, r2
 8004348:	bfc4      	itt	gt
 800434a:	1a9b      	subgt	r3, r3, r2
 800434c:	18ed      	addgt	r5, r5, r3
 800434e:	2600      	movs	r6, #0
 8004350:	341a      	adds	r4, #26
 8004352:	42b5      	cmp	r5, r6
 8004354:	d11a      	bne.n	800438c <_printf_common+0xc8>
 8004356:	2000      	movs	r0, #0
 8004358:	e008      	b.n	800436c <_printf_common+0xa8>
 800435a:	2301      	movs	r3, #1
 800435c:	4652      	mov	r2, sl
 800435e:	4649      	mov	r1, r9
 8004360:	4638      	mov	r0, r7
 8004362:	47c0      	blx	r8
 8004364:	3001      	adds	r0, #1
 8004366:	d103      	bne.n	8004370 <_printf_common+0xac>
 8004368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800436c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004370:	3501      	adds	r5, #1
 8004372:	e7c6      	b.n	8004302 <_printf_common+0x3e>
 8004374:	18e1      	adds	r1, r4, r3
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	2030      	movs	r0, #48	; 0x30
 800437a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800437e:	4422      	add	r2, r4
 8004380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004388:	3302      	adds	r3, #2
 800438a:	e7c7      	b.n	800431c <_printf_common+0x58>
 800438c:	2301      	movs	r3, #1
 800438e:	4622      	mov	r2, r4
 8004390:	4649      	mov	r1, r9
 8004392:	4638      	mov	r0, r7
 8004394:	47c0      	blx	r8
 8004396:	3001      	adds	r0, #1
 8004398:	d0e6      	beq.n	8004368 <_printf_common+0xa4>
 800439a:	3601      	adds	r6, #1
 800439c:	e7d9      	b.n	8004352 <_printf_common+0x8e>
	...

080043a0 <_printf_i>:
 80043a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043a4:	7e0f      	ldrb	r7, [r1, #24]
 80043a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043a8:	2f78      	cmp	r7, #120	; 0x78
 80043aa:	4691      	mov	r9, r2
 80043ac:	4680      	mov	r8, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	469a      	mov	sl, r3
 80043b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043b6:	d807      	bhi.n	80043c8 <_printf_i+0x28>
 80043b8:	2f62      	cmp	r7, #98	; 0x62
 80043ba:	d80a      	bhi.n	80043d2 <_printf_i+0x32>
 80043bc:	2f00      	cmp	r7, #0
 80043be:	f000 80d8 	beq.w	8004572 <_printf_i+0x1d2>
 80043c2:	2f58      	cmp	r7, #88	; 0x58
 80043c4:	f000 80a3 	beq.w	800450e <_printf_i+0x16e>
 80043c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043d0:	e03a      	b.n	8004448 <_printf_i+0xa8>
 80043d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043d6:	2b15      	cmp	r3, #21
 80043d8:	d8f6      	bhi.n	80043c8 <_printf_i+0x28>
 80043da:	a101      	add	r1, pc, #4	; (adr r1, 80043e0 <_printf_i+0x40>)
 80043dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043e0:	08004439 	.word	0x08004439
 80043e4:	0800444d 	.word	0x0800444d
 80043e8:	080043c9 	.word	0x080043c9
 80043ec:	080043c9 	.word	0x080043c9
 80043f0:	080043c9 	.word	0x080043c9
 80043f4:	080043c9 	.word	0x080043c9
 80043f8:	0800444d 	.word	0x0800444d
 80043fc:	080043c9 	.word	0x080043c9
 8004400:	080043c9 	.word	0x080043c9
 8004404:	080043c9 	.word	0x080043c9
 8004408:	080043c9 	.word	0x080043c9
 800440c:	08004559 	.word	0x08004559
 8004410:	0800447d 	.word	0x0800447d
 8004414:	0800453b 	.word	0x0800453b
 8004418:	080043c9 	.word	0x080043c9
 800441c:	080043c9 	.word	0x080043c9
 8004420:	0800457b 	.word	0x0800457b
 8004424:	080043c9 	.word	0x080043c9
 8004428:	0800447d 	.word	0x0800447d
 800442c:	080043c9 	.word	0x080043c9
 8004430:	080043c9 	.word	0x080043c9
 8004434:	08004543 	.word	0x08004543
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	1d1a      	adds	r2, r3, #4
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	602a      	str	r2, [r5, #0]
 8004440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004448:	2301      	movs	r3, #1
 800444a:	e0a3      	b.n	8004594 <_printf_i+0x1f4>
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	6829      	ldr	r1, [r5, #0]
 8004450:	0606      	lsls	r6, r0, #24
 8004452:	f101 0304 	add.w	r3, r1, #4
 8004456:	d50a      	bpl.n	800446e <_printf_i+0xce>
 8004458:	680e      	ldr	r6, [r1, #0]
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	2e00      	cmp	r6, #0
 800445e:	da03      	bge.n	8004468 <_printf_i+0xc8>
 8004460:	232d      	movs	r3, #45	; 0x2d
 8004462:	4276      	negs	r6, r6
 8004464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004468:	485e      	ldr	r0, [pc, #376]	; (80045e4 <_printf_i+0x244>)
 800446a:	230a      	movs	r3, #10
 800446c:	e019      	b.n	80044a2 <_printf_i+0x102>
 800446e:	680e      	ldr	r6, [r1, #0]
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004476:	bf18      	it	ne
 8004478:	b236      	sxthne	r6, r6
 800447a:	e7ef      	b.n	800445c <_printf_i+0xbc>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	1d19      	adds	r1, r3, #4
 8004482:	6029      	str	r1, [r5, #0]
 8004484:	0601      	lsls	r1, r0, #24
 8004486:	d501      	bpl.n	800448c <_printf_i+0xec>
 8004488:	681e      	ldr	r6, [r3, #0]
 800448a:	e002      	b.n	8004492 <_printf_i+0xf2>
 800448c:	0646      	lsls	r6, r0, #25
 800448e:	d5fb      	bpl.n	8004488 <_printf_i+0xe8>
 8004490:	881e      	ldrh	r6, [r3, #0]
 8004492:	4854      	ldr	r0, [pc, #336]	; (80045e4 <_printf_i+0x244>)
 8004494:	2f6f      	cmp	r7, #111	; 0x6f
 8004496:	bf0c      	ite	eq
 8004498:	2308      	moveq	r3, #8
 800449a:	230a      	movne	r3, #10
 800449c:	2100      	movs	r1, #0
 800449e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044a2:	6865      	ldr	r5, [r4, #4]
 80044a4:	60a5      	str	r5, [r4, #8]
 80044a6:	2d00      	cmp	r5, #0
 80044a8:	bfa2      	ittt	ge
 80044aa:	6821      	ldrge	r1, [r4, #0]
 80044ac:	f021 0104 	bicge.w	r1, r1, #4
 80044b0:	6021      	strge	r1, [r4, #0]
 80044b2:	b90e      	cbnz	r6, 80044b8 <_printf_i+0x118>
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	d04d      	beq.n	8004554 <_printf_i+0x1b4>
 80044b8:	4615      	mov	r5, r2
 80044ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80044be:	fb03 6711 	mls	r7, r3, r1, r6
 80044c2:	5dc7      	ldrb	r7, [r0, r7]
 80044c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044c8:	4637      	mov	r7, r6
 80044ca:	42bb      	cmp	r3, r7
 80044cc:	460e      	mov	r6, r1
 80044ce:	d9f4      	bls.n	80044ba <_printf_i+0x11a>
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d10b      	bne.n	80044ec <_printf_i+0x14c>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	07de      	lsls	r6, r3, #31
 80044d8:	d508      	bpl.n	80044ec <_printf_i+0x14c>
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	6861      	ldr	r1, [r4, #4]
 80044de:	4299      	cmp	r1, r3
 80044e0:	bfde      	ittt	le
 80044e2:	2330      	movle	r3, #48	; 0x30
 80044e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80044ec:	1b52      	subs	r2, r2, r5
 80044ee:	6122      	str	r2, [r4, #16]
 80044f0:	f8cd a000 	str.w	sl, [sp]
 80044f4:	464b      	mov	r3, r9
 80044f6:	aa03      	add	r2, sp, #12
 80044f8:	4621      	mov	r1, r4
 80044fa:	4640      	mov	r0, r8
 80044fc:	f7ff fee2 	bl	80042c4 <_printf_common>
 8004500:	3001      	adds	r0, #1
 8004502:	d14c      	bne.n	800459e <_printf_i+0x1fe>
 8004504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004508:	b004      	add	sp, #16
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450e:	4835      	ldr	r0, [pc, #212]	; (80045e4 <_printf_i+0x244>)
 8004510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004514:	6829      	ldr	r1, [r5, #0]
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	f851 6b04 	ldr.w	r6, [r1], #4
 800451c:	6029      	str	r1, [r5, #0]
 800451e:	061d      	lsls	r5, r3, #24
 8004520:	d514      	bpl.n	800454c <_printf_i+0x1ac>
 8004522:	07df      	lsls	r7, r3, #31
 8004524:	bf44      	itt	mi
 8004526:	f043 0320 	orrmi.w	r3, r3, #32
 800452a:	6023      	strmi	r3, [r4, #0]
 800452c:	b91e      	cbnz	r6, 8004536 <_printf_i+0x196>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	f023 0320 	bic.w	r3, r3, #32
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	2310      	movs	r3, #16
 8004538:	e7b0      	b.n	800449c <_printf_i+0xfc>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	f043 0320 	orr.w	r3, r3, #32
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	2378      	movs	r3, #120	; 0x78
 8004544:	4828      	ldr	r0, [pc, #160]	; (80045e8 <_printf_i+0x248>)
 8004546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800454a:	e7e3      	b.n	8004514 <_printf_i+0x174>
 800454c:	0659      	lsls	r1, r3, #25
 800454e:	bf48      	it	mi
 8004550:	b2b6      	uxthmi	r6, r6
 8004552:	e7e6      	b.n	8004522 <_printf_i+0x182>
 8004554:	4615      	mov	r5, r2
 8004556:	e7bb      	b.n	80044d0 <_printf_i+0x130>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	6826      	ldr	r6, [r4, #0]
 800455c:	6961      	ldr	r1, [r4, #20]
 800455e:	1d18      	adds	r0, r3, #4
 8004560:	6028      	str	r0, [r5, #0]
 8004562:	0635      	lsls	r5, r6, #24
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	d501      	bpl.n	800456c <_printf_i+0x1cc>
 8004568:	6019      	str	r1, [r3, #0]
 800456a:	e002      	b.n	8004572 <_printf_i+0x1d2>
 800456c:	0670      	lsls	r0, r6, #25
 800456e:	d5fb      	bpl.n	8004568 <_printf_i+0x1c8>
 8004570:	8019      	strh	r1, [r3, #0]
 8004572:	2300      	movs	r3, #0
 8004574:	6123      	str	r3, [r4, #16]
 8004576:	4615      	mov	r5, r2
 8004578:	e7ba      	b.n	80044f0 <_printf_i+0x150>
 800457a:	682b      	ldr	r3, [r5, #0]
 800457c:	1d1a      	adds	r2, r3, #4
 800457e:	602a      	str	r2, [r5, #0]
 8004580:	681d      	ldr	r5, [r3, #0]
 8004582:	6862      	ldr	r2, [r4, #4]
 8004584:	2100      	movs	r1, #0
 8004586:	4628      	mov	r0, r5
 8004588:	f7fb fe4a 	bl	8000220 <memchr>
 800458c:	b108      	cbz	r0, 8004592 <_printf_i+0x1f2>
 800458e:	1b40      	subs	r0, r0, r5
 8004590:	6060      	str	r0, [r4, #4]
 8004592:	6863      	ldr	r3, [r4, #4]
 8004594:	6123      	str	r3, [r4, #16]
 8004596:	2300      	movs	r3, #0
 8004598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800459c:	e7a8      	b.n	80044f0 <_printf_i+0x150>
 800459e:	6923      	ldr	r3, [r4, #16]
 80045a0:	462a      	mov	r2, r5
 80045a2:	4649      	mov	r1, r9
 80045a4:	4640      	mov	r0, r8
 80045a6:	47d0      	blx	sl
 80045a8:	3001      	adds	r0, #1
 80045aa:	d0ab      	beq.n	8004504 <_printf_i+0x164>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	079b      	lsls	r3, r3, #30
 80045b0:	d413      	bmi.n	80045da <_printf_i+0x23a>
 80045b2:	68e0      	ldr	r0, [r4, #12]
 80045b4:	9b03      	ldr	r3, [sp, #12]
 80045b6:	4298      	cmp	r0, r3
 80045b8:	bfb8      	it	lt
 80045ba:	4618      	movlt	r0, r3
 80045bc:	e7a4      	b.n	8004508 <_printf_i+0x168>
 80045be:	2301      	movs	r3, #1
 80045c0:	4632      	mov	r2, r6
 80045c2:	4649      	mov	r1, r9
 80045c4:	4640      	mov	r0, r8
 80045c6:	47d0      	blx	sl
 80045c8:	3001      	adds	r0, #1
 80045ca:	d09b      	beq.n	8004504 <_printf_i+0x164>
 80045cc:	3501      	adds	r5, #1
 80045ce:	68e3      	ldr	r3, [r4, #12]
 80045d0:	9903      	ldr	r1, [sp, #12]
 80045d2:	1a5b      	subs	r3, r3, r1
 80045d4:	42ab      	cmp	r3, r5
 80045d6:	dcf2      	bgt.n	80045be <_printf_i+0x21e>
 80045d8:	e7eb      	b.n	80045b2 <_printf_i+0x212>
 80045da:	2500      	movs	r5, #0
 80045dc:	f104 0619 	add.w	r6, r4, #25
 80045e0:	e7f5      	b.n	80045ce <_printf_i+0x22e>
 80045e2:	bf00      	nop
 80045e4:	08004c85 	.word	0x08004c85
 80045e8:	08004c96 	.word	0x08004c96

080045ec <_sbrk_r>:
 80045ec:	b538      	push	{r3, r4, r5, lr}
 80045ee:	4d06      	ldr	r5, [pc, #24]	; (8004608 <_sbrk_r+0x1c>)
 80045f0:	2300      	movs	r3, #0
 80045f2:	4604      	mov	r4, r0
 80045f4:	4608      	mov	r0, r1
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	f7fc fa24 	bl	8000a44 <_sbrk>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_sbrk_r+0x1a>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_sbrk_r+0x1a>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	20000444 	.word	0x20000444

0800460c <__sread>:
 800460c:	b510      	push	{r4, lr}
 800460e:	460c      	mov	r4, r1
 8004610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004614:	f000 fab2 	bl	8004b7c <_read_r>
 8004618:	2800      	cmp	r0, #0
 800461a:	bfab      	itete	ge
 800461c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800461e:	89a3      	ldrhlt	r3, [r4, #12]
 8004620:	181b      	addge	r3, r3, r0
 8004622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004626:	bfac      	ite	ge
 8004628:	6563      	strge	r3, [r4, #84]	; 0x54
 800462a:	81a3      	strhlt	r3, [r4, #12]
 800462c:	bd10      	pop	{r4, pc}

0800462e <__swrite>:
 800462e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004632:	461f      	mov	r7, r3
 8004634:	898b      	ldrh	r3, [r1, #12]
 8004636:	05db      	lsls	r3, r3, #23
 8004638:	4605      	mov	r5, r0
 800463a:	460c      	mov	r4, r1
 800463c:	4616      	mov	r6, r2
 800463e:	d505      	bpl.n	800464c <__swrite+0x1e>
 8004640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004644:	2302      	movs	r3, #2
 8004646:	2200      	movs	r2, #0
 8004648:	f000 f9c8 	bl	80049dc <_lseek_r>
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	4632      	mov	r2, r6
 800465a:	463b      	mov	r3, r7
 800465c:	4628      	mov	r0, r5
 800465e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004662:	f000 b869 	b.w	8004738 <_write_r>

08004666 <__sseek>:
 8004666:	b510      	push	{r4, lr}
 8004668:	460c      	mov	r4, r1
 800466a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800466e:	f000 f9b5 	bl	80049dc <_lseek_r>
 8004672:	1c43      	adds	r3, r0, #1
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	bf15      	itete	ne
 8004678:	6560      	strne	r0, [r4, #84]	; 0x54
 800467a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800467e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004682:	81a3      	strheq	r3, [r4, #12]
 8004684:	bf18      	it	ne
 8004686:	81a3      	strhne	r3, [r4, #12]
 8004688:	bd10      	pop	{r4, pc}

0800468a <__sclose>:
 800468a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800468e:	f000 b8d3 	b.w	8004838 <_close_r>
	...

08004694 <__swbuf_r>:
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004696:	460e      	mov	r6, r1
 8004698:	4614      	mov	r4, r2
 800469a:	4605      	mov	r5, r0
 800469c:	b118      	cbz	r0, 80046a6 <__swbuf_r+0x12>
 800469e:	6983      	ldr	r3, [r0, #24]
 80046a0:	b90b      	cbnz	r3, 80046a6 <__swbuf_r+0x12>
 80046a2:	f7ff fb81 	bl	8003da8 <__sinit>
 80046a6:	4b21      	ldr	r3, [pc, #132]	; (800472c <__swbuf_r+0x98>)
 80046a8:	429c      	cmp	r4, r3
 80046aa:	d12b      	bne.n	8004704 <__swbuf_r+0x70>
 80046ac:	686c      	ldr	r4, [r5, #4]
 80046ae:	69a3      	ldr	r3, [r4, #24]
 80046b0:	60a3      	str	r3, [r4, #8]
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	071a      	lsls	r2, r3, #28
 80046b6:	d52f      	bpl.n	8004718 <__swbuf_r+0x84>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	b36b      	cbz	r3, 8004718 <__swbuf_r+0x84>
 80046bc:	6923      	ldr	r3, [r4, #16]
 80046be:	6820      	ldr	r0, [r4, #0]
 80046c0:	1ac0      	subs	r0, r0, r3
 80046c2:	6963      	ldr	r3, [r4, #20]
 80046c4:	b2f6      	uxtb	r6, r6
 80046c6:	4283      	cmp	r3, r0
 80046c8:	4637      	mov	r7, r6
 80046ca:	dc04      	bgt.n	80046d6 <__swbuf_r+0x42>
 80046cc:	4621      	mov	r1, r4
 80046ce:	4628      	mov	r0, r5
 80046d0:	f000 f948 	bl	8004964 <_fflush_r>
 80046d4:	bb30      	cbnz	r0, 8004724 <__swbuf_r+0x90>
 80046d6:	68a3      	ldr	r3, [r4, #8]
 80046d8:	3b01      	subs	r3, #1
 80046da:	60a3      	str	r3, [r4, #8]
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	6022      	str	r2, [r4, #0]
 80046e2:	701e      	strb	r6, [r3, #0]
 80046e4:	6963      	ldr	r3, [r4, #20]
 80046e6:	3001      	adds	r0, #1
 80046e8:	4283      	cmp	r3, r0
 80046ea:	d004      	beq.n	80046f6 <__swbuf_r+0x62>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	07db      	lsls	r3, r3, #31
 80046f0:	d506      	bpl.n	8004700 <__swbuf_r+0x6c>
 80046f2:	2e0a      	cmp	r6, #10
 80046f4:	d104      	bne.n	8004700 <__swbuf_r+0x6c>
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 f933 	bl	8004964 <_fflush_r>
 80046fe:	b988      	cbnz	r0, 8004724 <__swbuf_r+0x90>
 8004700:	4638      	mov	r0, r7
 8004702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <__swbuf_r+0x9c>)
 8004706:	429c      	cmp	r4, r3
 8004708:	d101      	bne.n	800470e <__swbuf_r+0x7a>
 800470a:	68ac      	ldr	r4, [r5, #8]
 800470c:	e7cf      	b.n	80046ae <__swbuf_r+0x1a>
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <__swbuf_r+0xa0>)
 8004710:	429c      	cmp	r4, r3
 8004712:	bf08      	it	eq
 8004714:	68ec      	ldreq	r4, [r5, #12]
 8004716:	e7ca      	b.n	80046ae <__swbuf_r+0x1a>
 8004718:	4621      	mov	r1, r4
 800471a:	4628      	mov	r0, r5
 800471c:	f000 f81e 	bl	800475c <__swsetup_r>
 8004720:	2800      	cmp	r0, #0
 8004722:	d0cb      	beq.n	80046bc <__swbuf_r+0x28>
 8004724:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004728:	e7ea      	b.n	8004700 <__swbuf_r+0x6c>
 800472a:	bf00      	nop
 800472c:	08004c34 	.word	0x08004c34
 8004730:	08004c54 	.word	0x08004c54
 8004734:	08004c14 	.word	0x08004c14

08004738 <_write_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4d07      	ldr	r5, [pc, #28]	; (8004758 <_write_r+0x20>)
 800473c:	4604      	mov	r4, r0
 800473e:	4608      	mov	r0, r1
 8004740:	4611      	mov	r1, r2
 8004742:	2200      	movs	r2, #0
 8004744:	602a      	str	r2, [r5, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	f7fb ffec 	bl	8000724 <_write>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_write_r+0x1e>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_write_r+0x1e>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	20000444 	.word	0x20000444

0800475c <__swsetup_r>:
 800475c:	4b32      	ldr	r3, [pc, #200]	; (8004828 <__swsetup_r+0xcc>)
 800475e:	b570      	push	{r4, r5, r6, lr}
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	4606      	mov	r6, r0
 8004764:	460c      	mov	r4, r1
 8004766:	b125      	cbz	r5, 8004772 <__swsetup_r+0x16>
 8004768:	69ab      	ldr	r3, [r5, #24]
 800476a:	b913      	cbnz	r3, 8004772 <__swsetup_r+0x16>
 800476c:	4628      	mov	r0, r5
 800476e:	f7ff fb1b 	bl	8003da8 <__sinit>
 8004772:	4b2e      	ldr	r3, [pc, #184]	; (800482c <__swsetup_r+0xd0>)
 8004774:	429c      	cmp	r4, r3
 8004776:	d10f      	bne.n	8004798 <__swsetup_r+0x3c>
 8004778:	686c      	ldr	r4, [r5, #4]
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004780:	0719      	lsls	r1, r3, #28
 8004782:	d42c      	bmi.n	80047de <__swsetup_r+0x82>
 8004784:	06dd      	lsls	r5, r3, #27
 8004786:	d411      	bmi.n	80047ac <__swsetup_r+0x50>
 8004788:	2309      	movs	r3, #9
 800478a:	6033      	str	r3, [r6, #0]
 800478c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004796:	e03e      	b.n	8004816 <__swsetup_r+0xba>
 8004798:	4b25      	ldr	r3, [pc, #148]	; (8004830 <__swsetup_r+0xd4>)
 800479a:	429c      	cmp	r4, r3
 800479c:	d101      	bne.n	80047a2 <__swsetup_r+0x46>
 800479e:	68ac      	ldr	r4, [r5, #8]
 80047a0:	e7eb      	b.n	800477a <__swsetup_r+0x1e>
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <__swsetup_r+0xd8>)
 80047a4:	429c      	cmp	r4, r3
 80047a6:	bf08      	it	eq
 80047a8:	68ec      	ldreq	r4, [r5, #12]
 80047aa:	e7e6      	b.n	800477a <__swsetup_r+0x1e>
 80047ac:	0758      	lsls	r0, r3, #29
 80047ae:	d512      	bpl.n	80047d6 <__swsetup_r+0x7a>
 80047b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b2:	b141      	cbz	r1, 80047c6 <__swsetup_r+0x6a>
 80047b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047b8:	4299      	cmp	r1, r3
 80047ba:	d002      	beq.n	80047c2 <__swsetup_r+0x66>
 80047bc:	4630      	mov	r0, r6
 80047be:	f000 f991 	bl	8004ae4 <_free_r>
 80047c2:	2300      	movs	r3, #0
 80047c4:	6363      	str	r3, [r4, #52]	; 0x34
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	2300      	movs	r3, #0
 80047d0:	6063      	str	r3, [r4, #4]
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	f043 0308 	orr.w	r3, r3, #8
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	6923      	ldr	r3, [r4, #16]
 80047e0:	b94b      	cbnz	r3, 80047f6 <__swsetup_r+0x9a>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ec:	d003      	beq.n	80047f6 <__swsetup_r+0x9a>
 80047ee:	4621      	mov	r1, r4
 80047f0:	4630      	mov	r0, r6
 80047f2:	f000 f92b 	bl	8004a4c <__smakebuf_r>
 80047f6:	89a0      	ldrh	r0, [r4, #12]
 80047f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047fc:	f010 0301 	ands.w	r3, r0, #1
 8004800:	d00a      	beq.n	8004818 <__swsetup_r+0xbc>
 8004802:	2300      	movs	r3, #0
 8004804:	60a3      	str	r3, [r4, #8]
 8004806:	6963      	ldr	r3, [r4, #20]
 8004808:	425b      	negs	r3, r3
 800480a:	61a3      	str	r3, [r4, #24]
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	b943      	cbnz	r3, 8004822 <__swsetup_r+0xc6>
 8004810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004814:	d1ba      	bne.n	800478c <__swsetup_r+0x30>
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	0781      	lsls	r1, r0, #30
 800481a:	bf58      	it	pl
 800481c:	6963      	ldrpl	r3, [r4, #20]
 800481e:	60a3      	str	r3, [r4, #8]
 8004820:	e7f4      	b.n	800480c <__swsetup_r+0xb0>
 8004822:	2000      	movs	r0, #0
 8004824:	e7f7      	b.n	8004816 <__swsetup_r+0xba>
 8004826:	bf00      	nop
 8004828:	2000000c 	.word	0x2000000c
 800482c:	08004c34 	.word	0x08004c34
 8004830:	08004c54 	.word	0x08004c54
 8004834:	08004c14 	.word	0x08004c14

08004838 <_close_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4d06      	ldr	r5, [pc, #24]	; (8004854 <_close_r+0x1c>)
 800483c:	2300      	movs	r3, #0
 800483e:	4604      	mov	r4, r0
 8004840:	4608      	mov	r0, r1
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	f7fc f8c9 	bl	80009da <_close>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d102      	bne.n	8004852 <_close_r+0x1a>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	b103      	cbz	r3, 8004852 <_close_r+0x1a>
 8004850:	6023      	str	r3, [r4, #0]
 8004852:	bd38      	pop	{r3, r4, r5, pc}
 8004854:	20000444 	.word	0x20000444

08004858 <__sflush_r>:
 8004858:	898a      	ldrh	r2, [r1, #12]
 800485a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800485e:	4605      	mov	r5, r0
 8004860:	0710      	lsls	r0, r2, #28
 8004862:	460c      	mov	r4, r1
 8004864:	d458      	bmi.n	8004918 <__sflush_r+0xc0>
 8004866:	684b      	ldr	r3, [r1, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	dc05      	bgt.n	8004878 <__sflush_r+0x20>
 800486c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	dc02      	bgt.n	8004878 <__sflush_r+0x20>
 8004872:	2000      	movs	r0, #0
 8004874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800487a:	2e00      	cmp	r6, #0
 800487c:	d0f9      	beq.n	8004872 <__sflush_r+0x1a>
 800487e:	2300      	movs	r3, #0
 8004880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004884:	682f      	ldr	r7, [r5, #0]
 8004886:	602b      	str	r3, [r5, #0]
 8004888:	d032      	beq.n	80048f0 <__sflush_r+0x98>
 800488a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	075a      	lsls	r2, r3, #29
 8004890:	d505      	bpl.n	800489e <__sflush_r+0x46>
 8004892:	6863      	ldr	r3, [r4, #4]
 8004894:	1ac0      	subs	r0, r0, r3
 8004896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004898:	b10b      	cbz	r3, 800489e <__sflush_r+0x46>
 800489a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800489c:	1ac0      	subs	r0, r0, r3
 800489e:	2300      	movs	r3, #0
 80048a0:	4602      	mov	r2, r0
 80048a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048a4:	6a21      	ldr	r1, [r4, #32]
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b0      	blx	r6
 80048aa:	1c43      	adds	r3, r0, #1
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	d106      	bne.n	80048be <__sflush_r+0x66>
 80048b0:	6829      	ldr	r1, [r5, #0]
 80048b2:	291d      	cmp	r1, #29
 80048b4:	d82c      	bhi.n	8004910 <__sflush_r+0xb8>
 80048b6:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <__sflush_r+0x108>)
 80048b8:	40ca      	lsrs	r2, r1
 80048ba:	07d6      	lsls	r6, r2, #31
 80048bc:	d528      	bpl.n	8004910 <__sflush_r+0xb8>
 80048be:	2200      	movs	r2, #0
 80048c0:	6062      	str	r2, [r4, #4]
 80048c2:	04d9      	lsls	r1, r3, #19
 80048c4:	6922      	ldr	r2, [r4, #16]
 80048c6:	6022      	str	r2, [r4, #0]
 80048c8:	d504      	bpl.n	80048d4 <__sflush_r+0x7c>
 80048ca:	1c42      	adds	r2, r0, #1
 80048cc:	d101      	bne.n	80048d2 <__sflush_r+0x7a>
 80048ce:	682b      	ldr	r3, [r5, #0]
 80048d0:	b903      	cbnz	r3, 80048d4 <__sflush_r+0x7c>
 80048d2:	6560      	str	r0, [r4, #84]	; 0x54
 80048d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048d6:	602f      	str	r7, [r5, #0]
 80048d8:	2900      	cmp	r1, #0
 80048da:	d0ca      	beq.n	8004872 <__sflush_r+0x1a>
 80048dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048e0:	4299      	cmp	r1, r3
 80048e2:	d002      	beq.n	80048ea <__sflush_r+0x92>
 80048e4:	4628      	mov	r0, r5
 80048e6:	f000 f8fd 	bl	8004ae4 <_free_r>
 80048ea:	2000      	movs	r0, #0
 80048ec:	6360      	str	r0, [r4, #52]	; 0x34
 80048ee:	e7c1      	b.n	8004874 <__sflush_r+0x1c>
 80048f0:	6a21      	ldr	r1, [r4, #32]
 80048f2:	2301      	movs	r3, #1
 80048f4:	4628      	mov	r0, r5
 80048f6:	47b0      	blx	r6
 80048f8:	1c41      	adds	r1, r0, #1
 80048fa:	d1c7      	bne.n	800488c <__sflush_r+0x34>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0c4      	beq.n	800488c <__sflush_r+0x34>
 8004902:	2b1d      	cmp	r3, #29
 8004904:	d001      	beq.n	800490a <__sflush_r+0xb2>
 8004906:	2b16      	cmp	r3, #22
 8004908:	d101      	bne.n	800490e <__sflush_r+0xb6>
 800490a:	602f      	str	r7, [r5, #0]
 800490c:	e7b1      	b.n	8004872 <__sflush_r+0x1a>
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004914:	81a3      	strh	r3, [r4, #12]
 8004916:	e7ad      	b.n	8004874 <__sflush_r+0x1c>
 8004918:	690f      	ldr	r7, [r1, #16]
 800491a:	2f00      	cmp	r7, #0
 800491c:	d0a9      	beq.n	8004872 <__sflush_r+0x1a>
 800491e:	0793      	lsls	r3, r2, #30
 8004920:	680e      	ldr	r6, [r1, #0]
 8004922:	bf08      	it	eq
 8004924:	694b      	ldreq	r3, [r1, #20]
 8004926:	600f      	str	r7, [r1, #0]
 8004928:	bf18      	it	ne
 800492a:	2300      	movne	r3, #0
 800492c:	eba6 0807 	sub.w	r8, r6, r7
 8004930:	608b      	str	r3, [r1, #8]
 8004932:	f1b8 0f00 	cmp.w	r8, #0
 8004936:	dd9c      	ble.n	8004872 <__sflush_r+0x1a>
 8004938:	6a21      	ldr	r1, [r4, #32]
 800493a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800493c:	4643      	mov	r3, r8
 800493e:	463a      	mov	r2, r7
 8004940:	4628      	mov	r0, r5
 8004942:	47b0      	blx	r6
 8004944:	2800      	cmp	r0, #0
 8004946:	dc06      	bgt.n	8004956 <__sflush_r+0xfe>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800494e:	81a3      	strh	r3, [r4, #12]
 8004950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004954:	e78e      	b.n	8004874 <__sflush_r+0x1c>
 8004956:	4407      	add	r7, r0
 8004958:	eba8 0800 	sub.w	r8, r8, r0
 800495c:	e7e9      	b.n	8004932 <__sflush_r+0xda>
 800495e:	bf00      	nop
 8004960:	20400001 	.word	0x20400001

08004964 <_fflush_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	690b      	ldr	r3, [r1, #16]
 8004968:	4605      	mov	r5, r0
 800496a:	460c      	mov	r4, r1
 800496c:	b913      	cbnz	r3, 8004974 <_fflush_r+0x10>
 800496e:	2500      	movs	r5, #0
 8004970:	4628      	mov	r0, r5
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	b118      	cbz	r0, 800497e <_fflush_r+0x1a>
 8004976:	6983      	ldr	r3, [r0, #24]
 8004978:	b90b      	cbnz	r3, 800497e <_fflush_r+0x1a>
 800497a:	f7ff fa15 	bl	8003da8 <__sinit>
 800497e:	4b14      	ldr	r3, [pc, #80]	; (80049d0 <_fflush_r+0x6c>)
 8004980:	429c      	cmp	r4, r3
 8004982:	d11b      	bne.n	80049bc <_fflush_r+0x58>
 8004984:	686c      	ldr	r4, [r5, #4]
 8004986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0ef      	beq.n	800496e <_fflush_r+0xa>
 800498e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004990:	07d0      	lsls	r0, r2, #31
 8004992:	d404      	bmi.n	800499e <_fflush_r+0x3a>
 8004994:	0599      	lsls	r1, r3, #22
 8004996:	d402      	bmi.n	800499e <_fflush_r+0x3a>
 8004998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800499a:	f7ff faa3 	bl	8003ee4 <__retarget_lock_acquire_recursive>
 800499e:	4628      	mov	r0, r5
 80049a0:	4621      	mov	r1, r4
 80049a2:	f7ff ff59 	bl	8004858 <__sflush_r>
 80049a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049a8:	07da      	lsls	r2, r3, #31
 80049aa:	4605      	mov	r5, r0
 80049ac:	d4e0      	bmi.n	8004970 <_fflush_r+0xc>
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	059b      	lsls	r3, r3, #22
 80049b2:	d4dd      	bmi.n	8004970 <_fflush_r+0xc>
 80049b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049b6:	f7ff fa96 	bl	8003ee6 <__retarget_lock_release_recursive>
 80049ba:	e7d9      	b.n	8004970 <_fflush_r+0xc>
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <_fflush_r+0x70>)
 80049be:	429c      	cmp	r4, r3
 80049c0:	d101      	bne.n	80049c6 <_fflush_r+0x62>
 80049c2:	68ac      	ldr	r4, [r5, #8]
 80049c4:	e7df      	b.n	8004986 <_fflush_r+0x22>
 80049c6:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <_fflush_r+0x74>)
 80049c8:	429c      	cmp	r4, r3
 80049ca:	bf08      	it	eq
 80049cc:	68ec      	ldreq	r4, [r5, #12]
 80049ce:	e7da      	b.n	8004986 <_fflush_r+0x22>
 80049d0:	08004c34 	.word	0x08004c34
 80049d4:	08004c54 	.word	0x08004c54
 80049d8:	08004c14 	.word	0x08004c14

080049dc <_lseek_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4d07      	ldr	r5, [pc, #28]	; (80049fc <_lseek_r+0x20>)
 80049e0:	4604      	mov	r4, r0
 80049e2:	4608      	mov	r0, r1
 80049e4:	4611      	mov	r1, r2
 80049e6:	2200      	movs	r2, #0
 80049e8:	602a      	str	r2, [r5, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f7fc f81c 	bl	8000a28 <_lseek>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_lseek_r+0x1e>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_lseek_r+0x1e>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000444 	.word	0x20000444

08004a00 <__swhatbuf_r>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	460e      	mov	r6, r1
 8004a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a08:	2900      	cmp	r1, #0
 8004a0a:	b096      	sub	sp, #88	; 0x58
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	461d      	mov	r5, r3
 8004a10:	da08      	bge.n	8004a24 <__swhatbuf_r+0x24>
 8004a12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	602a      	str	r2, [r5, #0]
 8004a1a:	061a      	lsls	r2, r3, #24
 8004a1c:	d410      	bmi.n	8004a40 <__swhatbuf_r+0x40>
 8004a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a22:	e00e      	b.n	8004a42 <__swhatbuf_r+0x42>
 8004a24:	466a      	mov	r2, sp
 8004a26:	f000 f8bb 	bl	8004ba0 <_fstat_r>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	dbf1      	blt.n	8004a12 <__swhatbuf_r+0x12>
 8004a2e:	9a01      	ldr	r2, [sp, #4]
 8004a30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a38:	425a      	negs	r2, r3
 8004a3a:	415a      	adcs	r2, r3
 8004a3c:	602a      	str	r2, [r5, #0]
 8004a3e:	e7ee      	b.n	8004a1e <__swhatbuf_r+0x1e>
 8004a40:	2340      	movs	r3, #64	; 0x40
 8004a42:	2000      	movs	r0, #0
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	b016      	add	sp, #88	; 0x58
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a4c <__smakebuf_r>:
 8004a4c:	898b      	ldrh	r3, [r1, #12]
 8004a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a50:	079d      	lsls	r5, r3, #30
 8004a52:	4606      	mov	r6, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	d507      	bpl.n	8004a68 <__smakebuf_r+0x1c>
 8004a58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	6123      	str	r3, [r4, #16]
 8004a60:	2301      	movs	r3, #1
 8004a62:	6163      	str	r3, [r4, #20]
 8004a64:	b002      	add	sp, #8
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	ab01      	add	r3, sp, #4
 8004a6a:	466a      	mov	r2, sp
 8004a6c:	f7ff ffc8 	bl	8004a00 <__swhatbuf_r>
 8004a70:	9900      	ldr	r1, [sp, #0]
 8004a72:	4605      	mov	r5, r0
 8004a74:	4630      	mov	r0, r6
 8004a76:	f7ff fa57 	bl	8003f28 <_malloc_r>
 8004a7a:	b948      	cbnz	r0, 8004a90 <__smakebuf_r+0x44>
 8004a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a80:	059a      	lsls	r2, r3, #22
 8004a82:	d4ef      	bmi.n	8004a64 <__smakebuf_r+0x18>
 8004a84:	f023 0303 	bic.w	r3, r3, #3
 8004a88:	f043 0302 	orr.w	r3, r3, #2
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	e7e3      	b.n	8004a58 <__smakebuf_r+0xc>
 8004a90:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <__smakebuf_r+0x7c>)
 8004a92:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	6020      	str	r0, [r4, #0]
 8004a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	9b00      	ldr	r3, [sp, #0]
 8004aa0:	6163      	str	r3, [r4, #20]
 8004aa2:	9b01      	ldr	r3, [sp, #4]
 8004aa4:	6120      	str	r0, [r4, #16]
 8004aa6:	b15b      	cbz	r3, 8004ac0 <__smakebuf_r+0x74>
 8004aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aac:	4630      	mov	r0, r6
 8004aae:	f000 f889 	bl	8004bc4 <_isatty_r>
 8004ab2:	b128      	cbz	r0, 8004ac0 <__smakebuf_r+0x74>
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	81a3      	strh	r3, [r4, #12]
 8004ac0:	89a0      	ldrh	r0, [r4, #12]
 8004ac2:	4305      	orrs	r5, r0
 8004ac4:	81a5      	strh	r5, [r4, #12]
 8004ac6:	e7cd      	b.n	8004a64 <__smakebuf_r+0x18>
 8004ac8:	08003d41 	.word	0x08003d41

08004acc <__malloc_lock>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__malloc_lock+0x8>)
 8004ace:	f7ff ba09 	b.w	8003ee4 <__retarget_lock_acquire_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	20000438 	.word	0x20000438

08004ad8 <__malloc_unlock>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	; (8004ae0 <__malloc_unlock+0x8>)
 8004ada:	f7ff ba04 	b.w	8003ee6 <__retarget_lock_release_recursive>
 8004ade:	bf00      	nop
 8004ae0:	20000438 	.word	0x20000438

08004ae4 <_free_r>:
 8004ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	d044      	beq.n	8004b74 <_free_r+0x90>
 8004aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aee:	9001      	str	r0, [sp, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f1a1 0404 	sub.w	r4, r1, #4
 8004af6:	bfb8      	it	lt
 8004af8:	18e4      	addlt	r4, r4, r3
 8004afa:	f7ff ffe7 	bl	8004acc <__malloc_lock>
 8004afe:	4a1e      	ldr	r2, [pc, #120]	; (8004b78 <_free_r+0x94>)
 8004b00:	9801      	ldr	r0, [sp, #4]
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	b933      	cbnz	r3, 8004b14 <_free_r+0x30>
 8004b06:	6063      	str	r3, [r4, #4]
 8004b08:	6014      	str	r4, [r2, #0]
 8004b0a:	b003      	add	sp, #12
 8004b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b10:	f7ff bfe2 	b.w	8004ad8 <__malloc_unlock>
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	d908      	bls.n	8004b2a <_free_r+0x46>
 8004b18:	6825      	ldr	r5, [r4, #0]
 8004b1a:	1961      	adds	r1, r4, r5
 8004b1c:	428b      	cmp	r3, r1
 8004b1e:	bf01      	itttt	eq
 8004b20:	6819      	ldreq	r1, [r3, #0]
 8004b22:	685b      	ldreq	r3, [r3, #4]
 8004b24:	1949      	addeq	r1, r1, r5
 8004b26:	6021      	streq	r1, [r4, #0]
 8004b28:	e7ed      	b.n	8004b06 <_free_r+0x22>
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	b10b      	cbz	r3, 8004b34 <_free_r+0x50>
 8004b30:	42a3      	cmp	r3, r4
 8004b32:	d9fa      	bls.n	8004b2a <_free_r+0x46>
 8004b34:	6811      	ldr	r1, [r2, #0]
 8004b36:	1855      	adds	r5, r2, r1
 8004b38:	42a5      	cmp	r5, r4
 8004b3a:	d10b      	bne.n	8004b54 <_free_r+0x70>
 8004b3c:	6824      	ldr	r4, [r4, #0]
 8004b3e:	4421      	add	r1, r4
 8004b40:	1854      	adds	r4, r2, r1
 8004b42:	42a3      	cmp	r3, r4
 8004b44:	6011      	str	r1, [r2, #0]
 8004b46:	d1e0      	bne.n	8004b0a <_free_r+0x26>
 8004b48:	681c      	ldr	r4, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	6053      	str	r3, [r2, #4]
 8004b4e:	4421      	add	r1, r4
 8004b50:	6011      	str	r1, [r2, #0]
 8004b52:	e7da      	b.n	8004b0a <_free_r+0x26>
 8004b54:	d902      	bls.n	8004b5c <_free_r+0x78>
 8004b56:	230c      	movs	r3, #12
 8004b58:	6003      	str	r3, [r0, #0]
 8004b5a:	e7d6      	b.n	8004b0a <_free_r+0x26>
 8004b5c:	6825      	ldr	r5, [r4, #0]
 8004b5e:	1961      	adds	r1, r4, r5
 8004b60:	428b      	cmp	r3, r1
 8004b62:	bf04      	itt	eq
 8004b64:	6819      	ldreq	r1, [r3, #0]
 8004b66:	685b      	ldreq	r3, [r3, #4]
 8004b68:	6063      	str	r3, [r4, #4]
 8004b6a:	bf04      	itt	eq
 8004b6c:	1949      	addeq	r1, r1, r5
 8004b6e:	6021      	streq	r1, [r4, #0]
 8004b70:	6054      	str	r4, [r2, #4]
 8004b72:	e7ca      	b.n	8004b0a <_free_r+0x26>
 8004b74:	b003      	add	sp, #12
 8004b76:	bd30      	pop	{r4, r5, pc}
 8004b78:	2000043c 	.word	0x2000043c

08004b7c <_read_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d07      	ldr	r5, [pc, #28]	; (8004b9c <_read_r+0x20>)
 8004b80:	4604      	mov	r4, r0
 8004b82:	4608      	mov	r0, r1
 8004b84:	4611      	mov	r1, r2
 8004b86:	2200      	movs	r2, #0
 8004b88:	602a      	str	r2, [r5, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7fb ff08 	bl	80009a0 <_read>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_read_r+0x1e>
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_read_r+0x1e>
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	20000444 	.word	0x20000444

08004ba0 <_fstat_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4d07      	ldr	r5, [pc, #28]	; (8004bc0 <_fstat_r+0x20>)
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	4608      	mov	r0, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	602b      	str	r3, [r5, #0]
 8004bae:	f7fb ff20 	bl	80009f2 <_fstat>
 8004bb2:	1c43      	adds	r3, r0, #1
 8004bb4:	d102      	bne.n	8004bbc <_fstat_r+0x1c>
 8004bb6:	682b      	ldr	r3, [r5, #0]
 8004bb8:	b103      	cbz	r3, 8004bbc <_fstat_r+0x1c>
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	bd38      	pop	{r3, r4, r5, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000444 	.word	0x20000444

08004bc4 <_isatty_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4d06      	ldr	r5, [pc, #24]	; (8004be0 <_isatty_r+0x1c>)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4604      	mov	r4, r0
 8004bcc:	4608      	mov	r0, r1
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	f7fb ff1f 	bl	8000a12 <_isatty>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_isatty_r+0x1a>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_isatty_r+0x1a>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20000444 	.word	0x20000444

08004be4 <_init>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	bf00      	nop
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr

08004bf0 <_fini>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	bf00      	nop
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr
